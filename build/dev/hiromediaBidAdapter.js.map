{"version":3,"sources":["webpack:///./modules/hiromediaBidAdapter.js"],"names":["Ajax","require","bidfactory","bidmanager","utils","STATUS","adaptermanager","HiroMediaAdapter","BIDDER_CODE","ADAPTER_VERSION","REQUIRED_BID_PARAMS","DEFAULT_BID_PARAMS","bidUrl","isUndefined","value","addBidResponse","bid","bidResponse","placementCode","bidStatus","GOOD","NO_BID","bidObject","createBid","bidderCode","cpm","ad","width","height","logMessage","checkChance","sampling","Math","random","handleResponse","response","chance","getBrowser","ua","navigator","userAgent","browsers","name","stringSearch","versionSearch","version","some","browser","nameSearch","defaultVersionSearch","versionMatch","indexOf","match","getDomain","a","document","createElement","href","getTopWindowUrl","hostname","defaultParams","bidParams","processBid","sizes","parseSizesInput","params","hasValidBidRequest","shouldBid","bidInfo","selectedSize","additionalSizes","slice","join","tryJson","text","object","JSON","parse","ignore","_callBids","domain","bids","ajaxOptions","method","withCredentials","fixedRequest","adapterVersion","browserVersion","length","forEach","url","requestParams","Object","keys","key","stringify","bidRequest","ajax","success","responseText","error","err","xhr","logError","status","callBids","registerBidAdapter","module","exports"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;AAWA,IAAIA,OAAO,mBAAAC,CAAQ,CAAR,CAAX;AACA,IAAIC,aAAa,mBAAAD,CAAQ,CAAR,CAAjB;AACA,IAAIE,aAAa,mBAAAF,CAAQ,CAAR,CAAjB;AACA,IAAIG,QAAQ,mBAAAH,CAAQ,CAAR,CAAZ;AACA,IAAII,SAAS,mBAAAJ,CAAQ,CAAR,EAAyBI,MAAtC;AACA,IAAIC,iBAAiB,mBAAAL,CAAQ,CAAR,CAArB;;AAEA,IAAIM,mBAAmB,SAASA,gBAAT,GAA4B;AACjD;;AAEA;;;;;;;;AAOA,MAAIC,cAAc,WAAlB;;AAEA;;;;;;;AAOA,MAAIC,kBAAkB,CAAtB;;AAEA;;;;;;;AAOA,MAAIC,sBAAsB,CAAC,WAAD,CAA1B;;AAEA;;;;;;;AAOA,MAAIC,qBAAqB;AACvBC,YAAQ;AADe,GAAzB;;AAIA;;;;;;;;;AASA,WAASC,WAAT,CAAqBC,KAArB,EAA4B;AAC1B,WAAO,OAAOA,KAAP,KAAiB,WAAxB;AACD;;AAED;;;;;;;;;;;;;AAaA,WAASC,cAAT,CAAwBC,GAAxB,EAA6BC,WAA7B,EAA0C;AACxC,QAAIC,gBAAgBF,IAAIE,aAAxB;AACA,QAAIC,YAAYF,cAAcZ,OAAOe,IAArB,GAA4Bf,OAAOgB,MAAnD;AACA,QAAIC,YAAYpB,WAAWqB,SAAX,CAAqBJ,SAArB,EAAgCH,GAAhC,CAAhB;;AAEAM,cAAUE,UAAV,GAAuBhB,WAAvB;;AAEA,QAAIS,WAAJ,EAAiB;AACfK,gBAAUG,GAAV,GAAgBR,YAAYQ,GAA5B;AACAH,gBAAUI,EAAV,GAAeT,YAAYS,EAA3B;AACAJ,gBAAUK,KAAV,GAAkBV,YAAYU,KAA9B;AACAL,gBAAUM,MAAV,GAAmBX,YAAYW,MAA/B;AACD;;AAEDxB,UAAMyB,UAAN,CAAiB,4CAA4CX,aAA5C,GAA4D,WAA5D,GAA0EC,SAA3F;AACAhB,eAAWY,cAAX,CAA0BG,aAA1B,EAAyCI,SAAzC;AACD;;AAED;;;;;;;;;AASA,WAASQ,WAAT,CAAqBC,QAArB,EAA+B;AAC7B,WAAOC,KAAKC,MAAL,KAAgBF,QAAvB;AACD;;AAED;;;;;;;;;AASA,WAASG,cAAT,CAAwBC,QAAxB,EAAkCnB,GAAlC,EAAuC;AACrC;AACA;AACA,QAAIH,YAAYsB,SAASC,MAArB,KAAgCN,YAAYK,SAASC,MAArB,CAApC,EAAkE;AAChErB,qBAAeC,GAAf,EAAoBmB,QAApB;AACD,KAFD,MAEO;AACLpB,qBAAeC,GAAf,EAAoB,KAApB;AACD;AACF;;AAED;;;;;;;;;;;AAWA,WAASqB,UAAT,GAAsB;AACpB,QAAIC,KAAKC,UAAUC,SAAnB;AACA,QAAIC,WAAW,CAAC;AACdC,YAAM,QADQ;AAEdC,oBAAc;AAFA,KAAD,EAGZ;AACDD,YAAM;AADL,KAHY,EAKZ;AACDA,YAAM;AADL,KALY,EAOZ;AACDA,YAAM;AADL,KAPY,EASZ;AACDA,YAAM,IADL;AAEDE,qBAAe;AAFd,KATY,EAYZ;AACDF,YAAM,IADL;AAEDC,oBAAc,SAFb;AAGDC,qBAAe;AAHd,KAZY,CAAf;;AAkBA,QAAIF,OAAO,EAAX;AACA,QAAIG,UAAU,EAAd;;AAEAJ,aAASK,IAAT,CAAc,UAAUC,OAAV,EAAmB;AAC/B,UAAIC,aAAaD,QAAQJ,YAAR,IAAwBI,QAAQL,IAAjD;AACA,UAAIO,uBAAuBD,aAAa,WAAxC;AACA,UAAIJ,gBAAgBG,QAAQH,aAAR,IAAyBK,oBAA7C;AACA,UAAIC,YAAJ;;AAEA,UAAIZ,GAAGa,OAAH,CAAWH,UAAX,MAA2B,CAAC,CAAhC,EAAmC;AACjCN,eAAOK,QAAQL,IAAf;AACAQ,uBAAeZ,GAAGc,KAAH,CAASR,aAAT,CAAf;AACA,YAAIM,YAAJ,EAAkB;AAChBL,oBAAUK,gBAAgBA,aAAa,CAAb,CAA1B;AACD;AACD,eAAO,IAAP;AACD;AACF,KAdD;;AAgBA,WAAO;AACLR,YAAMA,IADD;AAELG,eAASA;AAFJ,KAAP;AAID;;AAED;;;;;;;;AAQA,WAASQ,SAAT,GAAqB;AACnB,QAAIC,IAAIC,SAASC,aAAT,CAAuB,GAAvB,CAAR;AACAF,MAAEG,IAAF,GAASrD,MAAMsD,eAAN,EAAT;AACA,WAAOJ,EAAEK,QAAT;AACD;;AAED;;;;;;;;;;AAUA,WAASC,aAAT,CAAuBC,SAAvB,EAAkC;AAChC,WAAO,SAAc,EAAd,EAAkBlD,kBAAlB,EAAsCkD,SAAtC,CAAP;AACD;;AAED;;;;;;;;;;AAUA,WAASC,UAAT,CAAoB9C,GAApB,EAAyB;AACvB,QAAI+C,QAAQ3D,MAAM4D,eAAN,CAAsBhD,IAAI+C,KAA1B,CAAZ;AACA,QAAIF,YAAYD,cAAc5C,IAAIiD,MAAlB,CAAhB;AACA,QAAIC,qBAAqB9D,MAAM8D,kBAAN,CAAyBL,SAAzB,EAAoCnD,mBAApC,EAAyDF,WAAzD,CAAzB;AACA,QAAI2D,YAAYD,kBAAhB;AACA,QAAIE,UAAU;AACZP,iBAAWA,SADC;AAEZM,iBAAWA,SAFC;AAGZE,oBAAcN,MAAM,CAAN,CAHF;AAIZO,uBAAiBP,MAAMQ,KAAN,CAAY,CAAZ,EAAeC,IAAf,CAAoB,GAApB;AAJL,KAAd;;AAOA,WAAOJ,OAAP;AACD;;AAED;;;;;;;;;AASA,WAASK,OAAT,CAAiBC,IAAjB,EAAuB;AACrB,QAAIC,SAAS,KAAb;;AAEA,QAAI;AACFA,eAASC,KAAKC,KAAL,CAAWH,IAAX,CAAT;AACD,KAFD,CAEE,OAAOI,MAAP,EAAe;AACf;AACD;;AAED,WAAOH,MAAP;AACD;;AAED;;;;;;;AAOA,WAASI,SAAT,CAAmBd,MAAnB,EAA2B;AACzB,QAAIlB,UAAUV,YAAd;AACA,QAAI2C,SAAS3B,WAAb;AACA,QAAI4B,OAAOhB,UAAUA,OAAOgB,IAA5B;AACA,QAAIC,cAAc;AAChBC,cAAQ,KADQ;AAEhBC,uBAAiB;AAFD,KAAlB;;AAKA;AACA,QAAIC,eAAe;AACjBC,sBAAgB7E,eADC;AAEjBsC,eAASA,QAAQL,IAFA;AAGjB6C,sBAAgBxC,QAAQF,OAHP;AAIjBmC,cAAQA;AAJS,KAAnB;;AAOA5E,UAAMyB,UAAN,CAAiB,oBAAjB;;AAEA,QAAIoD,QAAQA,KAAKO,MAAjB,EAAyB;AACvBP,WAAKQ,OAAL,CAAa,UAAUzE,GAAV,EAAe;AAC1B,YAAIoD,UAAUN,WAAW9C,GAAX,CAAd;AACA,YAAI6C,YAAYO,QAAQP,SAAxB;AACAzD,cAAMyB,UAAN,CAAiB,iCAAiCb,IAAIE,aAArC,GAAqD,GAArD,GAA2DkD,QAAQD,SAApF;AACA,YAAIC,QAAQD,SAAZ,EAAuB;AACrB,cAAIuB,MAAM7B,UAAUjD,MAApB;AACA,cAAI+E,gBAAgB,SAAc,EAAd,EAAkBN,YAAlB,EAAgCjB,QAAQP,SAAxC,EAAmD;AACrE3C,2BAAeF,IAAIE,aADkD;AAErEmD,0BAAcD,QAAQC,YAF+C;AAGrEC,6BAAiBF,QAAQE;AAH4C,WAAnD,CAApB;;AAMAsB,iBAAOC,IAAP,CAAYF,aAAZ,EAA2BF,OAA3B,CAAmC,UAAUK,GAAV,EAAe;AAChD,gBAAIH,cAAcG,GAAd,MAAuB,EAAvB,IAA6BjF,YAAY8E,cAAcG,GAAd,CAAZ,CAAjC,EAAkE;AAChE,qBAAOH,cAAcG,GAAd,CAAP;AACD;AACF,WAJD;;AAMA1F,gBAAMyB,UAAN,CAAiB,qCAAqC6D,GAArC,GAA2C,GAA3C,GAAiDd,KAAKmB,SAAL,CAAe3B,QAAQ4B,UAAvB,CAAlE;;AAEAhG,eAAKiG,IAAL,CAAUP,GAAV,EAAe;;AAEbQ,qBAAS,iBAASC,YAAT,EAAuB;AAC9B,kBAAIhE,WAAWsC,QAAQ0B,YAAR,CAAf;AACAjE,6BAAeC,QAAf,EAAyBnB,GAAzB;AACD,aALY;;AAOboF,mBAAO,eAASC,GAAT,EAAcC,GAAd,EAAmB;AACxBlG,oBAAMmG,QAAN,CAAe,uCAAf,EAAwDD,IAAIE,MAA5D,EAAoEH,GAApE;AACAtF,6BAAeC,GAAf,EAAoB,KAApB;AACD;;AAVY,WAAf,EAYG2E,aAZH,EAYkBT,WAZlB;AAaD,SA7BD,MA6BO;AACL;AACAnE,yBAAeC,GAAf,EAAoB,KAApB;AACD;AACF,OArCD;AAsCD;AACF;;AAED,SAAO;AACLyF,cAAU1B;AADL,GAAP;;AAIA;;AAEA;;;;;;;;;AASA;;;;;;;;;;;;AAYA;;;;;;;;;AASD,CA/VD;;AAiWAzE,eAAeoG,kBAAf,CAAkC,IAAInG,gBAAJ,EAAlC,EAA0D,WAA1D;;AAEAoG,OAAOC,OAAP,GAAiBrG,gBAAjB,C","file":"hiromediaBidAdapter.js","sourcesContent":["/**\n * Adapter for HIRO Media\n *\n * @module HiroMediaAdapter\n *\n * @requires src/ajax\n * @requires src/bidfactory\n * @requires src/bidmanager\n * @requires src/constants\n * @requires src/utils\n */\nvar Ajax = require('src/ajax');\nvar bidfactory = require('src/bidfactory');\nvar bidmanager = require('src/bidmanager');\nvar utils = require('src/utils');\nvar STATUS = require('src/constants').STATUS;\nvar adaptermanager = require('src/adaptermanager');\n\nvar HiroMediaAdapter = function HiroMediaAdapter() {\n  'use strict';\n\n  /**\n   * Bidder code\n   *\n   * @memberof module:HiroMediaAdapter~\n   * @constant {string}\n   * @private\n   */\n  var BIDDER_CODE = 'hiromedia';\n\n  /**\n   * Adapter version\n   *\n   * @memberof module:HiroMediaAdapter~\n   * @constant {number}\n   * @private\n   */\n  var ADAPTER_VERSION = 3;\n\n  /**\n   * Default bid param values\n   *\n   * @memberof module:HiroMediaAdapter~\n   * @constant {array.<string>}\n   * @private\n   */\n  var REQUIRED_BID_PARAMS = ['accountId'];\n\n  /**\n   * Default bid param values\n   *\n   * @memberof module:HiroMediaAdapter~\n   * @constant {module:HiroMediaAdapter~bidParams}\n   * @private\n   */\n  var DEFAULT_BID_PARAMS = {\n    bidUrl: 'https://hb-rtb.ktdpublishers.com/bid/get'\n  };\n\n  /**\n   * Returns true if the given value is `undefined`\n   *\n   * @memberof module:HiroMediaAdapter~\n   * @private\n   *\n   * @param  {*} value value to check\n   * @return {boolean} true if the given value is `undefined`, false otherwise\n   */\n  function isUndefined(value) {\n    return typeof value === 'undefined';\n  }\n\n  /**\n   * Call bidmanager.addBidResponse\n   *\n   * Simple wrapper that will create a bid object with the correct status\n   * and add the response for the placement.\n   *\n   * @memberof module:HiroMediaAdapter~\n   * @private\n   *\n   * @param  {object} bid bid object connected to the response\n   * @param  {object|boolean} [bidResponse] response object for bid, if not\n   * set the response will be an empty bid response.\n   */\n  function addBidResponse(bid, bidResponse) {\n    var placementCode = bid.placementCode;\n    var bidStatus = bidResponse ? STATUS.GOOD : STATUS.NO_BID;\n    var bidObject = bidfactory.createBid(bidStatus, bid);\n\n    bidObject.bidderCode = BIDDER_CODE;\n\n    if (bidResponse) {\n      bidObject.cpm = bidResponse.cpm;\n      bidObject.ad = bidResponse.ad;\n      bidObject.width = bidResponse.width;\n      bidObject.height = bidResponse.height;\n    }\n\n    utils.logMessage('hiromedia.callBids, addBidResponse for ' + placementCode + ' status: ' + bidStatus);\n    bidmanager.addBidResponse(placementCode, bidObject);\n  }\n\n  /**\n   * Return `true` if sampling is larger than a newly created random value\n   *\n   * @memberof module:HiroMediaAdapter~\n   * @private\n   *\n   * @param  {number} sampling the value to check\n   * @return {boolean}  `true` if the sampling is larger, `false` otherwise\n   */\n  function checkChance(sampling) {\n    return Math.random() < sampling;\n  }\n\n  /**\n   * Apply a response for all pending bids that have the same response batch key\n   *\n   * @memberof module:HiroMediaAdapter~\n   * @private\n   *\n   * @param  {object} response bid response object\n   * @param  {object} bid bid object connected to response\n   */\n  function handleResponse(response, bid) {\n    // Sample the bid responses according to `response.chance`,\n    // if `response.chance` is not provided, sample at 100%.\n    if (isUndefined(response.chance) || checkChance(response.chance)) {\n      addBidResponse(bid, response);\n    } else {\n      addBidResponse(bid, false);\n    }\n  }\n\n  /**\n   * Find browser name and version\n   *\n   * Super basic UA parser for the major browser configurations.\n   *\n   * @memberof module:HiroMediaAdapter~\n   * @private\n   *\n   * @return {module:HiroMediaAdapter~browserInfo} object containing name and version of browser\n   * or empty strings.\n   */\n  function getBrowser() {\n    var ua = navigator.userAgent;\n    var browsers = [{\n      name: 'Mobile',\n      stringSearch: 'Mobi'\n    }, {\n      name: 'Edge'\n    }, {\n      name: 'Chrome'\n    }, {\n      name: 'Firefox'\n    }, {\n      name: 'IE',\n      versionSearch: /MSIE\\s(\\d+)/\n    }, {\n      name: 'IE',\n      stringSearch: 'Trident',\n      versionSearch: /rv:(\\d+)/\n    }];\n\n    var name = '';\n    var version = '';\n\n    browsers.some(function (browser) {\n      var nameSearch = browser.stringSearch || browser.name;\n      var defaultVersionSearch = nameSearch + '\\\\/(\\\\d+)';\n      var versionSearch = browser.versionSearch || defaultVersionSearch;\n      var versionMatch;\n\n      if (ua.indexOf(nameSearch) !== -1) {\n        name = browser.name;\n        versionMatch = ua.match(versionSearch);\n        if (versionMatch) {\n          version = versionMatch && versionMatch[1];\n        }\n        return true;\n      }\n    });\n\n    return {\n      name: name,\n      version: version\n    };\n  }\n\n  /**\n   * Return top context domain\n   *\n   * @memberof module:HiroMediaAdapter~\n   * @private\n   *\n   * @return {string}  domain of top context url.\n   */\n  function getDomain() {\n    var a = document.createElement('a');\n    a.href = utils.getTopWindowUrl();\n    return a.hostname;\n  }\n\n  /**\n   * Apply default parameters to an object if the parameters are not set\n   *\n   * @memberof module:HiroMediaAdapter~\n   * @private\n   *\n   * @param  {module:HiroMediaAdapter~bidParams} bidParams custom parameters for bid\n   * @return {module:HiroMediaAdapter~bidParams} `bidParams` shallow merged with\n   * {@linkcode module:HiroMediaAdapter~DEFAULT_BID_PARAMS|DEFAULT_BID_PARAMS}\n   */\n  function defaultParams(bidParams) {\n    return Object.assign({}, DEFAULT_BID_PARAMS, bidParams);\n  }\n\n  /**\n   * Build a {@linkcode module:HiroMediaAdapter~bidInfo|bidInfo} object based on a\n   * bid sent to {@linkcode module:HiroMediaAdapter#callBids|callBids}\n   *\n   * @memberof module:HiroMediaAdapter~\n   * @private\n   *\n   * @param  {object} bid bid from `Prebid.js`\n   * @return {module:HiroMediaAdapter~bidInfo} information for bid request\n   */\n  function processBid(bid) {\n    var sizes = utils.parseSizesInput(bid.sizes);\n    var bidParams = defaultParams(bid.params);\n    var hasValidBidRequest = utils.hasValidBidRequest(bidParams, REQUIRED_BID_PARAMS, BIDDER_CODE);\n    var shouldBid = hasValidBidRequest;\n    var bidInfo = {\n      bidParams: bidParams,\n      shouldBid: shouldBid,\n      selectedSize: sizes[0],\n      additionalSizes: sizes.slice(1).join(',')\n    };\n\n    return bidInfo;\n  }\n\n  /**\n   * Wrapper around `JSON.parse()` that returns false on error\n   *\n   * @memberof module:HiroMediaAdapter~\n   * @private\n   *\n   * @param  {string} text potential JSON string to convert to object\n   * @return {object|boolean} object parsed from text or `false` in case of and error\n   */\n  function tryJson(text) {\n    var object = false;\n\n    try {\n      object = JSON.parse(text);\n    } catch (ignore) {\n      // Ignored\n    }\n\n    return object;\n  }\n\n  /**\n   * Receive a set of bid placements and create bid requests and responses accordingly\n   *\n   * @alias module:HiroMediaAdapter#callBids\n   *\n   * @param  {object} params placement and bid data from `Prebid.js`\n   */\n  function _callBids(params) {\n    var browser = getBrowser();\n    var domain = getDomain();\n    var bids = params && params.bids;\n    var ajaxOptions = {\n      method: 'GET',\n      withCredentials: true\n    };\n\n    // Fixed data, shared by all requests\n    var fixedRequest = {\n      adapterVersion: ADAPTER_VERSION,\n      browser: browser.name,\n      browserVersion: browser.version,\n      domain: domain\n    };\n\n    utils.logMessage('hiromedia.callBids');\n\n    if (bids && bids.length) {\n      bids.forEach(function (bid) {\n        var bidInfo = processBid(bid);\n        var bidParams = bidInfo.bidParams;\n        utils.logMessage('hiromedia.callBids, bidInfo ' + bid.placementCode + ' ' + bidInfo.shouldBid);\n        if (bidInfo.shouldBid) {\n          var url = bidParams.bidUrl;\n          var requestParams = Object.assign({}, fixedRequest, bidInfo.bidParams, {\n            placementCode: bid.placementCode,\n            selectedSize: bidInfo.selectedSize,\n            additionalSizes: bidInfo.additionalSizes\n          });\n\n          Object.keys(requestParams).forEach(function (key) {\n            if (requestParams[key] === '' || isUndefined(requestParams[key])) {\n              delete requestParams[key];\n            }\n          });\n\n          utils.logMessage('hiromedia.callBids, bid request ' + url + ' ' + JSON.stringify(bidInfo.bidRequest));\n\n          Ajax.ajax(url, {\n\n            success: function(responseText) {\n              var response = tryJson(responseText);\n              handleResponse(response, bid);\n            },\n\n            error: function(err, xhr) {\n              utils.logError('hiromedia.callBids, bid request error', xhr.status, err);\n              addBidResponse(bid, false);\n            }\n\n          }, requestParams, ajaxOptions);\n        } else {\n          // No bid\n          addBidResponse(bid, false);\n        }\n      });\n    }\n  }\n\n  return {\n    callBids: _callBids\n  };\n\n  // JSDoc typedefs\n\n  /**\n   * Parameters for bids to HIRO Media adapter\n   *\n   * @typedef {object} module:HiroMediaAdapter~bidParams\n   * @private\n   *\n   * @property {string} bidUrl the bid server endpoint url\n   */\n\n  /**\n   * Bid object wrapper\n   *\n   * @typedef {object} module:HiroMediaAdapter~bidInfo\n   * @private\n   *\n   * @property {string} selectedSize the first size in the the placement sizes array\n   * @property {string} additionalSizes list of sizes in the placement sizes array besides the first\n   * @property {module:HiroMediaAdapter~bidParams} bidParams original params passed for bid in #callBids\n   * @property {boolean} shouldBid flag to determine if the bid is valid for bidding or not\n   */\n\n  /**\n   * browserInfo\n   *\n   * @typedef {object} module:HiroMediaAdapter~browserInfo\n   * @private\n   *\n   * @property {string} name browser name (e.g. `'Chrome'` or `'Firefox'`)\n   * @property {string} version browser major version (e.g. `'53'`)\n   */\n};\n\nadaptermanager.registerBidAdapter(new HiroMediaAdapter(), 'hiromedia');\n\nmodule.exports = HiroMediaAdapter;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/hiromediaBidAdapter.js"],"sourceRoot":""}