{"version":3,"sources":["webpack:///./modules/huddledmassesBidAdapter.js"],"names":["utils","BIDDER_CODE","URL","URL_SYNC","sizeObj","_each","item","key","spec","code","isBidRequestValid","bid","isNaN","params","placement_id","sizes","undefined","length","some","sizeIndex","map","size","buildRequests","validBidRequests","winTop","window","top","location","toString","e","logMessage","getTopWindowLocation","placements","request","screen","width","height","navigator","language","protocol","host","pathname","i","placement","bidId","push","method","url","data","interpretResponse","serverResponse","response","body","resItem","requestId","cpm","ad","ttl","creativeId","netRevenue","currency","getUserSyncs","type"],"mappings":"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","file":"huddledmassesBidAdapter.js","sourcesContent":["import { registerBidder } from 'src/adapters/bidderFactory';\nimport * as utils from 'src/utils';\n\nconst BIDDER_CODE = 'huddledmasses';\nconst URL = '//huddledmassessupply.com/?c=o&m=multi';\nconst URL_SYNC = '//huddledmassessupply.com/?c=o&m=cookie';\n\nlet sizeObj = {\n  '468x60': 1,\n  '728x90': 2,\n  '300x600': 10,\n  '300x250': 15,\n  '300x100': 19,\n  '320x50': 43,\n  '300x50': 44,\n  '300x300': 48,\n  '300x1050': 54,\n  '970x90': 55,\n  '970x250': 57,\n  '1000x90': 58,\n  '320x80': 59,\n  '640x480': 65,\n  '320x480': 67,\n  '320x320': 72,\n  '320x160': 73,\n  '480x300': 83,\n  '970x310': 94,\n  '970x210': 96,\n  '480x320': 101,\n  '768x1024': 102,\n  '1000x300': 113,\n  '320x100': 117,\n  '800x250': 118,\n  '200x600': 119\n};\n\nutils._each(sizeObj, (item, key) => sizeObj[item] = key);\n\nexport const spec = {\n  code: BIDDER_CODE,\n\n  /**\n   * Determines whether or not the given bid request is valid.\n   *\n   * @param {object} bid The bid to validate.\n   * @return boolean True if this is a valid bid, and false otherwise.\n   */\n  isBidRequestValid: (bid) => {\n    return (!isNaN(bid.params.placement_id) &&\n    ((bid.params.sizes !== undefined && bid.params.sizes.length > 0 && bid.params.sizes.some((sizeIndex) => sizeObj[sizeIndex] !== undefined)) ||\n    (bid.sizes !== undefined && bid.sizes.length > 0 && bid.sizes.map((size) => `${size[0]}x${size[1]}`).some((size) => sizeObj[size] !== undefined))));\n  },\n\n  /**\n   * Make a server request from the list of BidRequests.\n   *\n   * @param {BidRequest[]} validBidRequests A non-empty list of valid bid requests that should be sent to the Server.\n   * @return ServerRequest Info describing the request to the server.\n   */\n  buildRequests: (validBidRequests) => {\n    let winTop = window;\n    try {\n      window.top.location.toString();\n      winTop = window.top;\n    } catch (e) {\n      utils.logMessage(e);\n    };\n    let location = utils.getTopWindowLocation();\n    let placements = [];\n    let request = {\n      'deviceWidth': winTop.screen.width,\n      'deviceHeight': winTop.screen.height,\n      'language': (navigator && navigator.language) ? navigator.language : '',\n      'secure': location.protocol === 'https:' ? 1 : 0,\n      'host': location.host,\n      'page': location.pathname,\n      'placements': placements\n    };\n    for (let i = 0; i < validBidRequests.length; i++) {\n      let bid = validBidRequests[i];\n      let placement = {};\n      placement['placementId'] = bid.params.placement_id;\n      placement['bidId'] = bid.bidId;\n      placement['sizes'] = bid.sizes;\n      placements.push(placement);\n    }\n    return {\n      method: 'POST',\n      url: URL,\n      data: request\n    };\n  },\n\n  /**\n   * Unpack the response from the server into a list of bids.\n   *\n   * @param {*} serverResponse A successful response from the server.\n   * @return {Bid[]} An array of bids which were nested inside the server.\n   */\n  interpretResponse: (serverResponse) => {\n    let response = [];\n    try {\n      serverResponse = serverResponse.body;\n      for (let i = 0; i < serverResponse.length; i++) {\n        let resItem = serverResponse[i];\n        if (resItem.width && !isNaN(resItem.width) &&\n            resItem.height && !isNaN(resItem.height) &&\n            resItem.requestId && typeof resItem.requestId === 'string' &&\n            resItem.cpm && !isNaN(resItem.cpm) &&\n            resItem.ad && typeof resItem.ad === 'string' &&\n            resItem.ttl && !isNaN(resItem.ttl) &&\n            resItem.creativeId && typeof resItem.creativeId === 'string' &&\n            resItem.netRevenue && typeof resItem.netRevenue === 'boolean' &&\n            resItem.currency && typeof resItem.currency === 'string') {\n          response.push(resItem);\n        }\n      }\n    } catch (e) {\n      utils.logMessage(e);\n    };\n    return response;\n  },\n\n  getUserSyncs: () => {\n    return [{\n      type: 'image',\n      url: URL_SYNC\n    }];\n  }\n};\n\nregisterBidder(spec);\n\n\n\n// WEBPACK FOOTER //\n// ./modules/huddledmassesBidAdapter.js"],"sourceRoot":""}