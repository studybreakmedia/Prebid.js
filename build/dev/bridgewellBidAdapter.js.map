{"version":3,"sources":["webpack:///./modules/bridgewellBidAdapter.js"],"names":["utils","BIDDER_CODE","REQUEST_ENDPOINT","spec","code","isBidRequestValid","bid","params","ChannelID","buildRequests","validBidRequests","channelIDs","_each","push","method","url","data","join","interpretResponse","serverResponse","bidRequest","bidResponses","req","bidResponse","body","matchedResponse","find","res","consumed","sizes","size","width","height","cpm","ad","net_revenue","currency","requestId","bidId","ttl","creativeId","id","netRevenue"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;IAAYA,K;;AACZ;;;;AAEA,IAAMC,cAAc,YAApB;AACA,IAAMC,mBAAmB,qCAAzB;;AAEO,IAAMC,sBAAO;AAClBC,QAAMH,WADY;;AAGlB;;;;;;AAMAI,qBAAmB,2BAASC,GAAT,EAAc;AAC/B,WAAOA,OAAOA,IAAIC,MAAX,IAAqB,CAAC,CAACD,IAAIC,MAAJ,CAAWC,SAAzC;AACD,GAXiB;;AAalB;;;;;;AAMAC,iBAAe,uBAASC,gBAAT,EAA2B;AACxC,QAAMC,aAAa,EAAnB;;AAEAX,UAAMY,KAAN,CAAYF,gBAAZ,EAA8B,UAASJ,GAAT,EAAc;AAC1CK,iBAAWE,IAAX,CAAgBP,IAAIC,MAAJ,CAAWC,SAA3B;AACD,KAFD;;AAIA,WAAO;AACLM,cAAQ,KADH;AAELC,WAAKb,gBAFA;AAGLc,YAAM;AACJ,qBAAaL,WAAWM,IAAX,CAAgB,GAAhB;AADT,OAHD;AAMLP,wBAAkBA;AANb,KAAP;AAQD,GAlCiB;;AAoClB;;;;;;;AAOAQ,qBAAmB,2BAASC,cAAT,EAAyBC,UAAzB,EAAqC;AACtD,QAAMC,eAAe,EAArB;;AAEA;AACArB,UAAMY,KAAN,CAAYQ,WAAWV,gBAAvB,EAAyC,UAASY,GAAT,EAAc;AACrD,UAAMC,cAAc,EAApB;;AAEA,UAAI,CAACJ,eAAeK,IAApB,EAA0B;AACxB;AACD;;AAED,UAAIC,kBAAkBN,eAAeK,IAAf,CAAoBE,IAApB,CAAyB,UAASC,GAAT,EAAc;AAC3D,eAAO,CAAC,CAACA,GAAF,IAAS,CAACA,IAAIC,QAAd,IAA0BN,IAAIO,KAAJ,CAAUH,IAAV,CAAe,UAASI,IAAT,EAAe;AAC7D,iBAAOH,IAAII,KAAJ,KAAcD,KAAK,CAAL,CAAd,IAAyBH,IAAIK,MAAJ,KAAeF,KAAK,CAAL,CAA/C;AACD,SAFgC,CAAjC;AAGD,OAJqB,CAAtB;;AAMA,UAAIL,eAAJ,EAAqB;AACnBA,wBAAgBG,QAAhB,GAA2B,IAA3B;;AAEA;AACA,YAAI,OAAOH,gBAAgBQ,GAAvB,KAA+B,QAAnC,EAA6C;AAC3C;AACD,SAFD,MAEO,IAAI,OAAOR,gBAAgBM,KAAvB,KAAiC,QAAjC,IAA6C,OAAON,gBAAgBO,MAAvB,KAAkC,QAAnF,EAA6F;AAClG;AACD,SAFM,MAEA,IAAI,OAAOP,gBAAgBS,EAAvB,KAA8B,QAAlC,EAA4C;AACjD;AACD,SAFM,MAEA,IAAI,OAAOT,gBAAgBU,WAAvB,KAAuC,WAA3C,EAAwD;AAC7D;AACD,SAFM,MAEA,IAAI,OAAOV,gBAAgBW,QAAvB,KAAoC,QAAxC,EAAkD;AACvD;AACD;;AAEDb,oBAAYc,SAAZ,GAAwBf,IAAIgB,KAA5B;AACAf,oBAAYU,GAAZ,GAAkBR,gBAAgBQ,GAAlC;AACAV,oBAAYQ,KAAZ,GAAoBN,gBAAgBM,KAApC;AACAR,oBAAYS,MAAZ,GAAqBP,gBAAgBO,MAArC;AACAT,oBAAYW,EAAZ,GAAiBT,gBAAgBS,EAAjC;AACAX,oBAAYgB,GAAZ,GAAkBd,gBAAgBc,GAAlC;AACAhB,oBAAYiB,UAAZ,GAAyBf,gBAAgBgB,EAAzC;AACAlB,oBAAYmB,UAAZ,GAAyBjB,gBAAgBU,WAAhB,KAAgC,MAAzD;AACAZ,oBAAYa,QAAZ,GAAuBX,gBAAgBW,QAAvC;;AAEAf,qBAAaR,IAAb,CAAkBU,WAAlB;AACD;AACF,KAzCD;;AA2CA,WAAOF,YAAP;AACD;AA3FiB,CAAb;;AA8FP,mCAAelB,IAAf,E","file":"bridgewellBidAdapter.js","sourcesContent":["import * as utils from 'src/utils';\nimport {registerBidder} from 'src/adapters/bidderFactory';\n\nconst BIDDER_CODE = 'bridgewell';\nconst REQUEST_ENDPOINT = '//rec.scupio.com/recweb/prebid.aspx';\n\nexport const spec = {\n  code: BIDDER_CODE,\n\n  /**\n   * Determines whether or not the given bid request is valid.\n   *\n   * @param {BidRequest} bid The bid params to validate.\n   * @return boolean True if this is a valid bid, and false otherwise.\n   */\n  isBidRequestValid: function(bid) {\n    return bid && bid.params && !!bid.params.ChannelID;\n  },\n\n  /**\n   * Make a server request from the list of BidRequests.\n   *\n   * @param {BidRequest[]} validBidRequests - an array of bids\n   * @return ServerRequest Info describing the request to the server.\n   */\n  buildRequests: function(validBidRequests) {\n    const channelIDs = [];\n\n    utils._each(validBidRequests, function(bid) {\n      channelIDs.push(bid.params.ChannelID);\n    });\n\n    return {\n      method: 'GET',\n      url: REQUEST_ENDPOINT,\n      data: {\n        'ChannelID': channelIDs.join(',')\n      },\n      validBidRequests: validBidRequests\n    };\n  },\n\n  /**\n   * Unpack the response from the server into a list of bids.\n   *\n   * @param {*} serverResponse A successful response from the server.\n   * @param {*} bidRequest\n   * @return {Bid[]} An array of bids which were nested inside the server.\n   */\n  interpretResponse: function(serverResponse, bidRequest) {\n    const bidResponses = [];\n\n    // map responses to requests\n    utils._each(bidRequest.validBidRequests, function(req) {\n      const bidResponse = {};\n\n      if (!serverResponse.body) {\n        return;\n      }\n\n      let matchedResponse = serverResponse.body.find(function(res) {\n        return !!res && !res.consumed && req.sizes.find(function(size) {\n          return res.width === size[0] && res.height === size[1];\n        });\n      });\n\n      if (matchedResponse) {\n        matchedResponse.consumed = true;\n\n        // check required parameters\n        if (typeof matchedResponse.cpm !== 'number') {\n          return;\n        } else if (typeof matchedResponse.width !== 'number' || typeof matchedResponse.height !== 'number') {\n          return;\n        } else if (typeof matchedResponse.ad !== 'string') {\n          return;\n        } else if (typeof matchedResponse.net_revenue === 'undefined') {\n          return;\n        } else if (typeof matchedResponse.currency !== 'string') {\n          return;\n        }\n\n        bidResponse.requestId = req.bidId;\n        bidResponse.cpm = matchedResponse.cpm;\n        bidResponse.width = matchedResponse.width;\n        bidResponse.height = matchedResponse.height;\n        bidResponse.ad = matchedResponse.ad;\n        bidResponse.ttl = matchedResponse.ttl;\n        bidResponse.creativeId = matchedResponse.id;\n        bidResponse.netRevenue = matchedResponse.net_revenue === 'true';\n        bidResponse.currency = matchedResponse.currency;\n\n        bidResponses.push(bidResponse);\n      }\n    });\n\n    return bidResponses;\n  }\n};\n\nregisterBidder(spec);\n\n\n\n// WEBPACK FOOTER //\n// ./modules/bridgewellBidAdapter.js"],"sourceRoot":""}