{"version":3,"sources":["webpack:///./modules/getintentBidAdapter.js"],"names":["BIDDER_CODE","IS_NET_REVENUE","BID_HOST","BID_BANNER_PATH","BID_VIDEO_PATH","BID_RESPONSE_TTL_SEC","VIDEO_PROPERTIES","OPTIONAL_PROPERTIES","spec","code","aliases","supportedMediaTypes","isBidRequestValid","bid","params","pid","tid","buildRequests","bidRequests","map","giBidRequest","buildGiBidRequest","bidRequest","method","url","buildUrl","data","interpretResponse","serverResponse","responseBody","body","bids","no_bid","size","parseSize","requestId","bid_id","ttl","netRevenue","currency","creativeId","creative_id","cpm","width","height","vast_url","mediaType","vastUrl","ad","push","is_video","bidId","known","resp_type","sizes","produceSize","addVideo","video","addOptional","i","l","length","key","hasOwnProperty","Array","isArray","join","request","props","s","split","Number"],"mappings":"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","file":"getintentBidAdapter.js","sourcesContent":["import { registerBidder } from 'src/adapters/bidderFactory';\n\nconst BIDDER_CODE = 'getintent';\nconst IS_NET_REVENUE = true;\nconst BID_HOST = 'px.adhigh.net';\nconst BID_BANNER_PATH = '/rtb/direct_banner';\nconst BID_VIDEO_PATH = '/rtb/direct_vast';\nconst BID_RESPONSE_TTL_SEC = 360;\nconst VIDEO_PROPERTIES = [\n  'protocols', 'mimes', 'min_dur', 'max_dur', 'min_btr', 'max_btr', 'vi_format', 'api', 'skippable'\n];\nconst OPTIONAL_PROPERTIES = [\n  'cur', 'floor'\n];\n\nexport const spec = {\n  code: BIDDER_CODE,\n  aliases: ['getintentAdapter'],\n  supportedMediaTypes: ['video', 'banner'],\n\n  /**\n   * Determines whether or not the given bid request is valid.\n   *\n   * @param {BidRequest} bid The bid to validate.\n   * @return {boolean} True if this is a valid bid, and false otherwise.\n   * */\n  isBidRequestValid: function(bid) {\n    return !!(bid && bid.params && bid.params.pid && bid.params.tid);\n  },\n\n  /**\n   * Make a server request from the list of BidRequests.\n   *\n   * @param {BidRequest[]} bidRequests - an array of bids.\n   * @return ServerRequest[]\n   */\n  buildRequests: function(bidRequests) {\n    return bidRequests.map(bidRequest => {\n      let giBidRequest = buildGiBidRequest(bidRequest);\n      return {\n        method: 'GET',\n        url: buildUrl(giBidRequest),\n        data: giBidRequest,\n      };\n    });\n  },\n\n  /**\n   * Callback for bids, after the call to DSP completes.\n   * Parse the response from the server into a list of bids.\n   *\n   * @param {object} serverResponse A response from the server.\n   * @return {Bid[]} An array of bids which were nested inside the server.\n   */\n  interpretResponse: function(serverResponse) {\n    let responseBody = serverResponse.body;\n    const bids = [];\n    if (responseBody && responseBody.no_bid !== 1) {\n      let size = parseSize(responseBody.size);\n      let bid = {\n        requestId: responseBody.bid_id,\n        ttl: BID_RESPONSE_TTL_SEC,\n        netRevenue: IS_NET_REVENUE,\n        currency: responseBody.currency,\n        creativeId: responseBody.creative_id,\n        cpm: responseBody.cpm,\n        width: size[0],\n        height: size[1]\n      };\n      if (responseBody.vast_url) {\n        bid.mediaType = 'video';\n        bid.vastUrl = responseBody.vast_url;\n      } else {\n        bid.mediaType = 'banner';\n        bid.ad = responseBody.ad;\n      }\n      bids.push(bid);\n    }\n    return bids;\n  }\n\n}\n\nfunction buildUrl(bid) {\n  return '//' + BID_HOST + (bid.is_video ? BID_VIDEO_PATH : BID_BANNER_PATH);\n}\n\n/**\n * Builds GI bid request from BidRequest.\n *\n * @param {BidRequest} bidRequest.\n * @return {object} GI bid request.\n * */\nfunction buildGiBidRequest(bidRequest) {\n  let giBidRequest = {\n    bid_id: bidRequest.bidId,\n    pid: bidRequest.params.pid, // required\n    tid: bidRequest.params.tid, // required\n    known: bidRequest.params.known || 1,\n    is_video: bidRequest.mediaType === 'video',\n    resp_type: 'JSON'\n  };\n  if (bidRequest.sizes) {\n    giBidRequest.size = produceSize(bidRequest.sizes);\n  }\n  addVideo(bidRequest.params.video, giBidRequest);\n  addOptional(bidRequest.params, giBidRequest, OPTIONAL_PROPERTIES);\n  return giBidRequest;\n}\n\nfunction addVideo(video, giBidRequest) {\n  if (giBidRequest.is_video && video) {\n    for (let i = 0, l = VIDEO_PROPERTIES.length; i < l; i++) {\n      let key = VIDEO_PROPERTIES[i];\n      if (video.hasOwnProperty(key)) {\n        giBidRequest[key] = Array.isArray(video[key]) ? video[key].join(',') : video[key];\n      }\n    }\n  }\n}\n\nfunction addOptional(params, request, props) {\n  for (let i = 0; i < props.length; i++) {\n    if (params.hasOwnProperty(props[i])) {\n      request[props[i]] = params[props[i]];\n    }\n  }\n}\n\nfunction parseSize(s) {\n  return s.split('x').map(Number);\n}\n\nfunction produceSize(sizes) {\n  // TODO: add support for multiple sizes\n  if (Array.isArray(sizes[0])) {\n    return sizes[0].join('x');\n  } else {\n    return sizes.join('x');\n  }\n}\n\nregisterBidder(spec);\n\n\n\n// WEBPACK FOOTER //\n// ./modules/getintentBidAdapter.js"],"sourceRoot":""}