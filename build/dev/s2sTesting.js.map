{"version":3,"sources":["webpack:///./modules/s2sTesting.js"],"names":["getSourceBidderMap","getSource","CONSTANTS","require","AST","JSON_MAPPING","ADSERVER_TARGETING","SERVER","CLIENT","testing","bidSource","getConfig","config","s2sConfig","addBidderSourceTargeting","calculateBidSources","bidderSettings","pbjs","bidderControl","bidders","forEach","bidder","filter","kvp","key","includeSourceKvp","push","val","bidResponse","source","alwaysUseBid","adUnits","sourceBidders","adUnit","bids","bid","calcSource","finalSource","Object","keys","sourceWeights","bidSources","srcIncWeight","totWeight","rndWeight","Math","random","i","length","exports"],"mappings":"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","file":"s2sTesting.js","sourcesContent":["import { config } from 'src/config';\nimport { setS2STestingModule } from 'src/adaptermanager';\n\nvar CONSTANTS = require('src/constants.json');\nconst AST = CONSTANTS.JSON_MAPPING.ADSERVER_TARGETING;\nexport const SERVER = 'server';\nexport const CLIENT = 'client';\n\nvar testing = false; // whether testing is turned on\nvar bidSource = {}; // store bidder sources determined from s2sConfing bidderControl\n\n// load s2sConfig\nconfig.getConfig('s2sConfig', config => {\n  testing = config.s2sConfig && config.s2sConfig.testing;\n  addBidderSourceTargeting(config.s2sConfig)\n  calculateBidSources(config.s2sConfig);\n});\n\n// function to add hb_source_<bidder> adServerTargeting (AST) kvp to bidder settings\nfunction addBidderSourceTargeting(s2sConfig = {}) {\n  // bail if testing is not turned on\n  if (!testing) {\n    return;\n  }\n  var bidderSettings = pbjs.bidderSettings || {};\n  var bidderControl = s2sConfig.bidderControl || {};\n  // for each configured bidder\n  (s2sConfig.bidders || []).forEach((bidder) => {\n    // remove any existing kvp setting\n    if (bidderSettings[bidder] && bidderSettings[bidder][AST]) {\n      bidderSettings[bidder][AST] = bidderSettings[bidder][AST].filter((kvp) => {\n        return kvp.key !== `hb_source_${bidder}`;\n      });\n    }\n    // if includeSourceKvp === true add new kvp setting\n    if (bidderControl[bidder] && bidderControl[bidder].includeSourceKvp) {\n      bidderSettings[bidder] = bidderSettings[bidder] || {};\n      bidderSettings[bidder][AST] = bidderSettings[bidder][AST] || [];\n      bidderSettings[bidder][AST].push({\n        key: `hb_source_${bidder}`,\n        val: function (bidResponse) {\n          // default to client (currently only S2S sets this)\n          return bidResponse.source || CLIENT;\n        }\n      });\n      // make sure \"alwaysUseBid\" is true so targeting is set\n      bidderSettings[bidder].alwaysUseBid = true;\n    }\n  });\n}\n\nexport function getSourceBidderMap(adUnits = []) {\n  var sourceBidders = {[SERVER]: {}, [CLIENT]: {}};\n\n  // bail if testing is not turned on\n  if (!testing) {\n    return {[SERVER]: [], [CLIENT]: []};\n  }\n\n  adUnits.forEach((adUnit) => {\n    // if any adUnit bidders specify a bidSource, include them\n    (adUnit.bids || []).forEach((bid) => {\n      // calculate the source once and store on bid object\n      bid.calcSource = bid.calcSource || getSource(bid.bidSource);\n      // if no bidSource at bid level, default to bidSource from bidder\n      bid.finalSource = bid.calcSource || bidSource[bid.bidder] || CLIENT; // default to client\n      // add bidder to sourceBidders data structure\n      sourceBidders[bid.finalSource][bid.bidder] = true;\n    });\n  });\n\n  // make sure all bidders in bidSource are in sourceBidders\n  Object.keys(bidSource).forEach((bidder) => {\n    sourceBidders[bidSource[bidder]][bidder] = true;\n  });\n\n  // return map of source => array of bidders\n  return {\n    [SERVER]: Object.keys(sourceBidders[SERVER]),\n    [CLIENT]: Object.keys(sourceBidders[CLIENT])\n  };\n}\n\n/**\n * @function calculateBidSources determines the source for each s2s bidder based on bidderControl weightings.  these can be overridden at the adUnit level\n * @param s2sConfig server-to-server configuration\n */\nfunction calculateBidSources(s2sConfig = {}) {\n  // bail if testing is not turned on\n  if (!testing) {\n    return;\n  }\n  bidSource = {}; // reset bid sources\n  // calculate bid source (server/client) for each s2s bidder\n  var bidderControl = s2sConfig.bidderControl || {};\n  (s2sConfig.bidders || []).forEach((bidder) => {\n    bidSource[bidder] = getSource(bidderControl[bidder] && bidderControl[bidder].bidSource) || SERVER; // default to server\n  });\n}\n\n/**\n * @function getSource() gets a random source based on the given sourceWeights (export just for testing)\n * @param sourceWeights mapping of relative weights of potential sources. for example {server: 1, client: 3} should do a server request 25% of the time and a client request 75% of the time.\n * @param bidSources list of possible bid sources: \"server\", \"client\".  In theory could get the sources from the sourceWeights keys, but this is publisher config defined, so bidSources let's us constrain that.\n * @return the chosen source (\"server\" or \"client\"), or undefined if none chosen\n */\nexport function getSource(sourceWeights = {}, bidSources = [SERVER, CLIENT]) {\n  var srcIncWeight = {}; // store incremental weights of each source\n  var totWeight = 0;\n  bidSources.forEach((source) => {\n    totWeight += (sourceWeights[source] || 0);\n    srcIncWeight[source] = totWeight;\n  });\n  if (!totWeight) return; // bail if no source weights\n  // choose a source randomly based on weights\n  var rndWeight = Math.random() * totWeight;\n  for (var i = 0; i < bidSources.length; i++) {\n    let source = bidSources[i];\n    // choose the first source with an incremental weight > random weight\n    if (rndWeight < srcIncWeight[source]) return source;\n  }\n}\n\n// inject the s2sTesting module into the adaptermanager rather than importing it\n// importing it causes the packager to include it even when it's not explicitly included in the build\nsetS2STestingModule(exports);\n\n\n\n// WEBPACK FOOTER //\n// ./modules/s2sTesting.js"],"sourceRoot":""}