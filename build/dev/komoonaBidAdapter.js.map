{"version":3,"sources":["webpack:///./modules/komoonaBidAdapter.js"],"names":["utils","BIDDER_CODE","ENDPOINT","USYNCURL","spec","code","isBidRequestValid","bid","params","placementId","hbid","buildRequests","tags","validBidRequests","map","tag","uuid","bidId","sizes","trid","transactionId","placementid","floorPrice","floorprice","time","Date","getTime","kbConf","ts_as","hb_placements","hb_placement_bidids","hb_floors","cb","_generateCb","tz","getTimezoneOffset","forEach","hdbdid","encode_bid","push","payload","isEmpty","bids","method","url","data","JSON","stringify","interpretResponse","response","request","bidResponses","body","requestId","ad","creative","error","logError","getUserSyncs","syncOptions","iframeEnabled","type","Math","floor","random"],"mappings":"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","file":"komoonaBidAdapter.js","sourcesContent":["import * as utils from 'src/utils';\nimport { registerBidder } from 'src/adapters/bidderFactory';\n\nconst BIDDER_CODE = 'komoona';\nconst ENDPOINT = '//bidder.komoona.com/v1/GetSBids';\nconst USYNCURL = '//s.komoona.com/sync/usync.html';\n\nexport const spec = {\n  code: BIDDER_CODE,\n\n  /**\n  * Determines whether or not the given bid request is valid. Valid bid request must have placementId and hbid\n  *\n  * @param {BidRequest} bid The bid params to validate.\n  * @return boolean True if this is a valid bid, and false otherwise.\n  */\n  isBidRequestValid: bid => {\n    return !!(bid && bid.params && bid.params.placementId && bid.params.hbid);\n  },\n  /**\n  * Make a server request from the list of BidRequests.\n  *\n  * @param {validBidRequests[]} - an array of bids\n  * @return ServerRequest Info describing the request to the server.\n  */\n  buildRequests: validBidRequests => {\n    const tags = validBidRequests.map(bid => {\n      // map each bid id to bid object to retrieve adUnit code in callback\n      let tag = {\n        uuid: bid.bidId,\n        sizes: bid.sizes,\n        trid: bid.transactionId,\n        hbid: bid.params.hbid,\n        placementid: bid.params.placementId\n      };\n\n      // add floor price if specified (not mandatory)\n      if (bid.params.floorPrice) {\n        tag.floorprice = bid.params.floorPrice;\n      }\n\n      return tag;\n    });\n\n    // Komoona server config\n    const time = new Date().getTime();\n    const kbConf = {\n      ts_as: time,\n      hb_placements: [],\n      hb_placement_bidids: {},\n      hb_floors: {},\n      cb: _generateCb(time),\n      tz: new Date().getTimezoneOffset(),\n    };\n\n    validBidRequests.forEach(bid => {\n      kbConf.hdbdid = kbConf.hdbdid || bid.params.hbid;\n      kbConf.encode_bid = kbConf.encode_bid || bid.params.encode_bid;\n      kbConf.hb_placement_bidids[bid.params.placementId] = bid.bidId;\n      if (bid.params.floorPrice) {\n        kbConf.hb_floors[bid.params.placementId] = bid.params.floorPrice;\n      }\n      kbConf.hb_placements.push(bid.params.placementId);\n    });\n\n    let payload = {};\n    if (!utils.isEmpty(tags)) {\n      payload = { bids: [...tags], kbConf: kbConf };\n    }\n\n    return {\n      method: 'POST',\n      url: ENDPOINT,\n      data: JSON.stringify(payload)\n    };\n  },\n  /**\n  * Unpack the response from the server into a list of bids.\n  *\n  * @param {*} response A successful response from the server.\n  * @return {Bid[]} An array of bids which were nested inside the server.\n  */\n  interpretResponse: (response, request) => {\n    const bidResponses = [];\n    try {\n      if (response.body && response.body.bids) {\n        response.body.bids.forEach(bid => {\n          // The bid ID. Used to tie this bid back to the request.\n          bid.requestId = bid.uuid;\n          // The creative payload of the returned bid.\n          bid.ad = bid.creative;\n          bidResponses.push(bid);\n        });\n      }\n    } catch (error) {\n      utils.logError(error);\n    }\n    return bidResponses;\n  },\n  /**\n  * Register User Sync.\n  */\n  getUserSyncs: syncOptions => {\n    if (syncOptions.iframeEnabled) {\n      return [{\n        type: 'iframe',\n        url: USYNCURL\n      }];\n    }\n  }\n};\n\n/**\n* Generated cache baster value to be sent to bid server\n* @param {*} time current time to use for creating cb.\n*/\nfunction _generateCb(time) {\n  return Math.floor((time % 65536) + (Math.floor(Math.random() * 65536) * 65536));\n}\n\nregisterBidder(spec);\n\n\n\n// WEBPACK FOOTER //\n// ./modules/komoonaBidAdapter.js"],"sourceRoot":""}