{"version":3,"sources":["webpack:///./modules/quantcastBidAdapter.js"],"names":["utils","BIDDER_CODE","DEFAULT_BID_FLOOR","QUANTCAST_CALLBACK_URL","QUANTCAST_CALLBACK_URL_TEST","QUANTCAST_NET_REVENUE","QUANTCAST_TEST_PUBLISHER","QUANTCAST_TTL","spec","code","isBidRequestValid","bid","mediaType","buildRequests","bidRequests","bids","referrer","getTopWindowUrl","loc","getTopWindowLocation","domain","hostname","publisherTagURL","publisherTagURLTest","window","location","protocol","bidRequestsList","map","bidSizes","sizes","forEach","push","width","size","height","requestData","publisherId","params","requestId","bidId","imp","banner","battr","placementCode","bidFloor","site","page","href","data","JSON","stringify","url","method","interpretResponse","serverResponse","undefined","logError","response","hasOwnProperty","isEmpty","bidResponsesList","ad","cpm","creativeId","currency","ttl","netRevenue"],"mappings":"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","file":"quantcastBidAdapter.js","sourcesContent":["import * as utils from 'src/utils';\nimport { registerBidder } from 'src/adapters/bidderFactory';\n\nconst BIDDER_CODE = 'quantcast';\nconst DEFAULT_BID_FLOOR = 0.0000000001;\n\nexport const QUANTCAST_CALLBACK_URL = 'global.qc.rtb.quantserve.com';\nexport const QUANTCAST_CALLBACK_URL_TEST = 's2s-canary.quantserve.com';\nexport const QUANTCAST_NET_REVENUE = true;\nexport const QUANTCAST_TEST_PUBLISHER = 'test-publisher';\nexport const QUANTCAST_TTL = 4;\n\n/**\n * The documentation for Prebid.js Adapter 1.0 can be found at link below,\n * http://prebid.org/dev-docs/bidder-adapter-1.html\n */\nexport const spec = {\n  code: BIDDER_CODE,\n\n  /**\n   * Verify the `AdUnits.bids` response with `true` for valid request and `false`\n   * for invalid request.\n   *\n   * @param {object} bid\n   * @return boolean `true` is this is a valid bid, and `false` otherwise\n   */\n  isBidRequestValid(bid) {\n    if (!bid) {\n      return false;\n    }\n\n    if (bid.mediaType === 'video') {\n      return false;\n    }\n\n    return true;\n  },\n\n  /**\n   * Make a server request when the page asks Prebid.js for bids from a list of\n   * `BidRequests`.\n   *\n   * @param {BidRequest[]} bidRequests A non-empty list of bid requests which should be send to Quantcast server\n   * @return ServerRequest information describing the request to the server.\n   */\n  buildRequests(bidRequests) {\n    const bids = bidRequests || [];\n\n    const referrer = utils.getTopWindowUrl();\n    const loc = utils.getTopWindowLocation();\n    const domain = loc.hostname;\n\n    let publisherTagURL;\n    let publisherTagURLTest;\n\n    // Switch the callback URL to Quantcast Canary Endpoint for testing purpose\n    // `//` is not used because we have different port setting at our end\n    switch (window.location.protocol) {\n      case 'https:':\n        publisherTagURL = `https://${QUANTCAST_CALLBACK_URL}:8443/qchb`;\n        publisherTagURLTest = `https://${QUANTCAST_CALLBACK_URL_TEST}:8443/qchb`;\n        break;\n      default:\n        publisherTagURL = `http://${QUANTCAST_CALLBACK_URL}:8080/qchb`;\n        publisherTagURLTest = `http://${QUANTCAST_CALLBACK_URL_TEST}:8080/qchb`;\n    }\n\n    const bidRequestsList = bids.map(bid => {\n      const bidSizes = [];\n\n      bid.sizes.forEach(size => {\n        bidSizes.push({\n          width: size[0],\n          height: size[1]\n        });\n      });\n\n      // Request Data Format can be found at https://wiki.corp.qc/display/adinf/QCX\n      const requestData = {\n        publisherId: bid.params.publisherId,\n        requestId: bid.bidId,\n        imp: [\n          {\n            banner: {\n              battr: bid.params.battr,\n              sizes: bidSizes\n            },\n            placementCode: bid.placementCode,\n            bidFloor: bid.params.bidFloor || DEFAULT_BID_FLOOR\n          }\n        ],\n        site: {\n          page: loc.href,\n          referrer,\n          domain\n        },\n        bidId: bid.bidId\n      };\n\n      const data = JSON.stringify(requestData);\n\n      const url =\n        bid.params.publisherId === QUANTCAST_TEST_PUBLISHER\n          ? publisherTagURLTest\n          : publisherTagURL;\n\n      return {\n        data,\n        method: 'POST',\n        url\n      };\n    });\n\n    return bidRequestsList;\n  },\n\n  /**\n   * Function get called when the browser has received the response from Quantcast server.\n   * The function parse the response and create a `bidResponse` object containing one/more bids.\n   * Returns an empty array if no valid bids\n   *\n   * Response Data Format can be found at https://wiki.corp.qc/display/adinf/QCX\n   *\n   * @param {*} serverResponse A successful response from Quantcast server.\n   * @return {Bid[]} An array of bids which were nested inside the server.\n   *\n   */\n  interpretResponse(serverResponse) {\n    if (serverResponse === undefined) {\n      utils.logError('Server Response is undefined');\n      return [];\n    }\n\n    const response = serverResponse['body'];\n\n    if (\n      response === undefined ||\n      !response.hasOwnProperty('bids') ||\n      utils.isEmpty(response.bids)\n    ) {\n      utils.logError('Sub-optimal JSON received from Quantcast server');\n      return [];\n    }\n\n    const bidResponsesList = response.bids.map(bid => {\n      const { ad, cpm, width, height, creativeId, currency } = bid;\n\n      return {\n        requestId: response.requestId,\n        cpm,\n        width,\n        height,\n        ad,\n        ttl: QUANTCAST_TTL,\n        creativeId,\n        netRevenue: QUANTCAST_NET_REVENUE,\n        currency\n      };\n    });\n\n    return bidResponsesList;\n  }\n};\n\nregisterBidder(spec);\n\n\n\n// WEBPACK FOOTER //\n// ./modules/quantcastBidAdapter.js"],"sourceRoot":""}