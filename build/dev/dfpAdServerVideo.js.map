{"version":3,"sources":["webpack:///./modules/dfpAdServerVideo.js","webpack:///./src/adServerManager.js"],"names":["buildDfpVideoUrl","defaultParamConstants","env","gdfp_req","output","unviewed_position_start","options","params","url","adUnit","bid","code","urlComponents","buildUrlFromAdserverUrlComponents","derivedParams","correlator","Date","now","sz","sizes","join","location","href","adserverTargeting","customParams","hb_uuid","videoCacheKey","cust_params","queryParams","search","encodeURIComponent","descriptionUrl","getDescriptionUrl","description_url","protocol","host","pathname","components","prop","getConfig","vastUrl","buildVideoUrl","registerVideoSupport","prebid","name","videoSupport","adServers"],"mappings":"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","file":"dfpAdServerVideo.js","sourcesContent":["/**\n * This module adds [DFP support]{@link https://www.doubleclickbygoogle.com/} for Video to Prebid.\n */\n\nimport { registerVideoSupport } from '../src/adServerManager';\nimport { getWinningBids } from '../src/targeting';\nimport { formatQS, format as buildUrl, parse } from '../src/url';\nimport { deepAccess, isEmpty, logError, parseSizesInput } from '../src/utils';\nimport { config } from '../src/config';\n\n/**\n * @typedef {Object} DfpVideoParams\n *\n * This object contains the params needed to form a URL which hits the\n * [DFP API]{@link https://support.google.com/dfp_premium/answer/1068325?hl=en}.\n *\n * All params (except iu, mentioned below) should be considered optional. This module will choose reasonable\n * defaults for all of the other required params.\n *\n * The cust_params property, if present, must be an object. It will be merged with the rest of the\n * standard Prebid targeting params (hb_adid, hb_bidder, etc).\n *\n * @param {string} iu This param *must* be included, in order for us to create a valid request.\n * @param [string] description_url This field is required if you want Ad Exchange to bid on our ad unit...\n *   but otherwise optional\n */\n\n/**\n * @typedef {Object} DfpVideoOptions\n *\n * @param {Object} adUnit The adUnit which this bid is supposed to help fill.\n * @param [Object] bid The bid which should be considered alongside the rest of the adserver's demand.\n *   If this isn't defined, then we'll use the winning bid for the adUnit.\n *\n * @param {DfpVideoParams} [params] Query params which should be set on the DFP request.\n *   These will override this module's defaults whenever they conflict.\n * @param {string} [url] video adserver url\n */\n\n/** Safe defaults which work on pretty much all video calls. */\nconst defaultParamConstants = {\n  env: 'vp',\n  gdfp_req: 1,\n  output: 'xml_vast3',\n  unviewed_position_start: 1,\n};\n\n/**\n * Merge all the bid data and publisher-supplied options into a single URL, and then return it.\n *\n * @see [The DFP API]{@link https://support.google.com/dfp_premium/answer/1068325?hl=en#env} for details.\n *\n * @param {DfpVideoOptions} options Options which should be used to construct the URL.\n *\n * @return {string} A URL which calls DFP, letting options.bid\n *   (or the auction's winning bid for this adUnit, if undefined) compete alongside the rest of the\n *   demand in DFP.\n */\nexport default function buildDfpVideoUrl(options) {\n  if (!options.params && !options.url) {\n    logError(`A params object or a url is required to use pbjs.adServers.dfp.buildVideoUrl`);\n    return;\n  }\n\n  const adUnit = options.adUnit;\n  const bid = options.bid || getWinningBids(adUnit.code)[0];\n\n  let urlComponents = {};\n\n  if (options.url) {\n    // when both `url` and `params` are given, parsed url will be overwriten\n    // with any matching param components\n    urlComponents = parse(options.url);\n\n    if (isEmpty(options.params)) {\n      return buildUrlFromAdserverUrlComponents(urlComponents, bid);\n    }\n  }\n\n  const derivedParams = {\n    correlator: Date.now(),\n    sz: parseSizesInput(adUnit.sizes).join('|'),\n    url: location.href,\n  };\n\n  const adserverTargeting = (bid && bid.adserverTargeting) || {};\n\n  const customParams = Object.assign({},\n    adserverTargeting,\n    { hb_uuid: bid && bid.videoCacheKey },\n    options.params.cust_params);\n\n  const queryParams = Object.assign({},\n    defaultParamConstants,\n    urlComponents.search,\n    derivedParams,\n    options.params,\n    { cust_params: encodeURIComponent(formatQS(customParams)) }\n  );\n\n  const descriptionUrl = getDescriptionUrl(bid, options, 'params');\n  if (descriptionUrl) { queryParams.description_url = descriptionUrl; }\n\n  return buildUrl({\n    protocol: 'https',\n    host: 'pubads.g.doubleclick.net',\n    pathname: '/gampad/ads',\n    search: queryParams\n  });\n}\n\n/**\n * Builds a video url from a base dfp video url and a winning bid, appending\n * Prebid-specific key-values.\n * @param {Object} components base video adserver url parsed into components object\n * @param {AdapterBidResponse} bid winning bid object to append parameters from\n * @return {string} video url\n */\nfunction buildUrlFromAdserverUrlComponents(components, bid) {\n  const descriptionUrl = getDescriptionUrl(bid, components, 'search');\n  if (descriptionUrl) { components.search.description_url = descriptionUrl; }\n\n  const adserverTargeting = (bid && bid.adserverTargeting) || {};\n  const customParams = Object.assign({},\n    adserverTargeting,\n  );\n  components.search.cust_params = encodeURIComponent(formatQS(customParams));\n\n  return buildUrl(components);\n}\n\n/**\n * Returns the encoded vast url if it exists on a bid object, only if prebid-cache\n * is disabled, and description_url is not already set on a given input\n * @param {AdapterBidResponse} bid object to check for vast url\n * @param {Object} components the object to check that description_url is NOT set on\n * @param {string} prop the property of components that would contain description_url\n * @return {string | undefined} The encoded vast url if it exists, or undefined\n */\nfunction getDescriptionUrl(bid, components, prop) {\n  if (config.getConfig('usePrebidCache')) { return; }\n\n  if (!deepAccess(components, `${prop}.description_url`)) {\n    const vastUrl = bid && bid.vastUrl;\n    if (vastUrl) { return encodeURIComponent(vastUrl); }\n  } else {\n    logError(`input cannnot contain description_url`);\n  }\n}\n\nregisterVideoSupport('dfp', {\n  buildVideoUrl: buildDfpVideoUrl\n});\n\n\n\n// WEBPACK FOOTER //\n// ./modules/dfpAdServerVideo.js","import { getGlobal } from './prebidGlobal';\nimport { logWarn } from './utils';\n\nconst prebid = getGlobal();\n\n/**\n * This file defines the plugin points in prebid-core for AdServer-specific functionality.\n *\n * Its main job is to expose functions for AdServer modules to append functionality to the Prebid public API.\n * For a given Ad Server with name \"adServerName\", these functions will only change the API in the\n * pbjs.adServers[adServerName] namespace.\n */\n\n/**\n * @typedef {Object} CachedVideoBid\n *\n * @property {string} videoCacheId The ID which can be used to retrieve this video from prebid-server.\n *   This is the same ID given to the callback in the videoCache's store function.\n */\n\n/**\n * @function VideoAdUrlBuilder\n *\n * @param {CachedVideoBid} bid The winning Bid which the ad server should show, assuming it beats out\n *   the competition.\n *\n * @param {Object} options Options required by the Ad Server to make a valid AdServer URL.\n *   This object will have different properties depending on the specific ad server supported.\n *   For more information, see the docs inside the ad server module you're supporting.\n *\n * @return {string} A URL which can be passed into the Video player to play an ad.\n */\n\n/**\n * @typedef {Object} VideoSupport\n *\n * @function {VideoAdUrlBuilder} buildVideoAdUrl\n */\n\n/**\n * Enable video support for the Ad Server.\n *\n * @property {string} name The identifying name for this adserver.\n * @property {VideoSupport} videoSupport An object with the functions needed to support video in Prebid.\n */\nexport function registerVideoSupport(name, videoSupport) {\n  prebid.adServers = prebid.adServers || { };\n  prebid.adServers[name] = prebid.adServers[name] || { };\n  if (prebid.adServers[name].buildVideoUrl) {\n    logWarn(`Multiple calls to registerVideoSupport for AdServer ${name}. Expect surprising behavior.`);\n    return;\n  }\n  prebid.adServers[name].buildVideoUrl = videoSupport.buildVideoUrl;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/adServerManager.js"],"sourceRoot":""}