{"version":3,"sources":["webpack:///./modules/brightcomBidAdapter.js"],"names":["CONSTANTS","require","utils","bidfactory","bidmanager","adloader","adaptermanager","BrightcomAdapter","brightcomUrl","brightcomBidderCode","brightcomCallbackFunction","reqAdUnitsCode","resAdUnitsCode","_callBids","params","bidRequests","bids","siteDomain","window","location","host","sitePage","href","brightcomImps","pubId","_each","bid","tagId","getBidIdParameter","ref","adWidth","adHeight","sizes","length","imp","id","getUniqueIdentifierStr","banner","w","h","tagid","ext","refoverride","push","placementCode","brightcomBidReq","site","publisher","domain","page","PREBID_TIMEOUT","curTimeout","tmax","bidRequestCallUrl","encodeURIComponent","JSON","stringify","loadScript","pbjs","brightcomResponse","brightcomResponseObj","seatbid","forEach","curBid","bidRequest","_bidsRequested","find","bidSet","bidderCode","status","STATUS","GOOD","size","responseCreative","adm","responseNurl","nurl","responseAd","decodeURIComponent","createBid","creative_id","Id","cpm","parseFloat","price","ad","width","height","addBidResponse","i","adUnitCode","indexOf","callBids","registerBidAdapter","module","exports"],"mappings":";;;;;;;;;;;;;;;;AAAA,IAAIA,YAAY,mBAAAC,CAAQ,CAAR,CAAhB;AACA,IAAIC,QAAQ,mBAAAD,CAAQ,CAAR,CAAZ;AACA,IAAIE,aAAa,mBAAAF,CAAQ,CAAR,CAAjB;AACA,IAAIG,aAAa,mBAAAH,CAAQ,CAAR,CAAjB;AACA,IAAII,WAAW,mBAAAJ,CAAQ,CAAR,CAAf;AACA,IAAIK,iBAAiB,mBAAAL,CAAQ,CAAR,CAArB;;AAEA;;;AAGA,IAAIM,mBAAmB,SAASA,gBAAT,GAA4B;AACjD;AACA,MAAIC,eAAe,4BAAnB;;AAEA;AACA,MAAIC,sBAAsB,WAA1B;;AAEA;AACA,MAAIC,4BAA4B,4FAAhC;;AAEA;AACA,MAAMC,iBAAiB,EAAvB;AACA,MAAMC,iBAAiB,EAAvB;;AAEA,WAASC,SAAT,CAAmBC,MAAnB,EAA2B;AACzB,QAAIC,cAAcD,OAAOE,IAAP,IAAe,EAAjC;;AAEA;AACA,QAAIC,aAAaC,OAAOC,QAAP,CAAgBC,IAAjC;AACA,QAAIC,WAAWH,OAAOC,QAAP,CAAgBG,IAA/B;;AAEA;AACA,QAAIC,gBAAgB,EAApB;;AAEA;AACA,QAAIC,QAAQ,EAAZ;;AAEA;AACAtB,UAAMuB,KAAN,CAAYV,WAAZ,EAAyB,UAASW,GAAT,EAAc;AACrC;AACA,UAAIC,QAAQzB,MAAM0B,iBAAN,CAAwB,OAAxB,EAAiCF,IAAIZ,MAArC,CAAZ;AACA,UAAIe,MAAM3B,MAAM0B,iBAAN,CAAwB,KAAxB,EAA+BF,IAAIZ,MAAnC,CAAV;AACA,UAAIgB,UAAU,CAAd;AACA,UAAIC,WAAW,CAAf;;AAEA;AACA,UAAIP,UAAU,EAAd,EAAkB;AAChB;AACAA,gBAAQtB,MAAM0B,iBAAN,CAAwB,OAAxB,EAAiCF,IAAIZ,MAArC,CAAR;AACD;;AAED;AACA;AACA,UAAIY,IAAIM,KAAJ,CAAUC,MAAV,KAAqB,CAArB,IAA0B,OAAOP,IAAIM,KAAJ,CAAU,CAAV,CAAP,KAAwB,QAAlD,IAA8D,OAAON,IAAIM,KAAJ,CAAU,CAAV,CAAP,KAAwB,QAA1F,EAAoG;AAClG;AACAF,kBAAUJ,IAAIM,KAAJ,CAAU,CAAV,CAAV;AACAD,mBAAWL,IAAIM,KAAJ,CAAU,CAAV,CAAX;AACD,OAJD,MAIO;AACL;AACAF,kBAAUJ,IAAIM,KAAJ,CAAU,CAAV,EAAa,CAAb,CAAV;AACAD,mBAAWL,IAAIM,KAAJ,CAAU,CAAV,EAAa,CAAb,CAAX;AACD;;AAED;AACA,UAAIE,MAAM;AACRC,YAAIjC,MAAMkC,sBAAN,EADI;AAERC,gBAAQ;AACNC,aAAGR,OADG;AAENS,aAAGR;AAFG,SAFA;AAMRS,eAAOb;AANC,OAAV;;AASA;AACA,UAAIE,QAAQ,EAAZ,EAAgB;AACdK,YAAIO,GAAJ,GAAU;AACRC,uBAAab;AADL,SAAV;AAGD;;AAED;AACAN,oBAAcoB,IAAd,CAAmBT,GAAnB;AACA;AACA;;AAEA;AACAvB,qBAAegC,IAAf,CAAoBjB,IAAIkB,aAAxB;AACD,KAjDD;;AAmDA;AACA,QAAIC,kBAAkB;AACpBV,UAAIjC,MAAMkC,sBAAN,EADgB;AAEpBF,WAAKX,aAFe;AAGpBuB,YAAM;AACJC,mBAAW;AACTZ,cAAIX;AADK,SADP;AAIJwB,gBAAQ/B,UAJJ;AAKJgC,cAAM5B;AALF;AAHc,KAAtB;;AAYA;AACA,QAAI6B,iBAAiBA,kBAAkB,CAAvC;AACA,QAAIC,aAAaD,cAAjB;AACA,QAAIC,aAAa,CAAjB,EAAoB;AAClBN,sBAAgBO,IAAhB,GAAuBD,UAAvB;AACD;;AAED;AACA,QAAIE,oBAAoB,aAAa7C,YAAb,GACpB,YADoB,GACL8C,mBAAmB5C,yBAAnB,CADK,GAEpB,WAFoB,GAEN4C,mBAAmBC,KAAKC,SAAL,CAAeX,eAAf,CAAnB,CAFlB;;AAIA;AACAxC,aAASoD,UAAT,CAAoBJ,iBAApB;AACD;;AAED;AACAK,OAAKC,iBAAL,GAAyB,UAASC,oBAAT,EAA+B;AACtD,QAAIlC,MAAM,EAAV;;AAEA;AACA,QACGkC,oBAAD,IAA2BA,qBAAqBzB,EAAhD,IACGyB,qBAAqBC,OADxB,IACqCD,qBAAqBC,OAArB,CAA6B5B,MAA7B,KAAwC,CAD7E,IAEG2B,qBAAqBC,OAArB,CAA6B,CAA7B,EAAgCnC,GAFnC,IAE4CkC,qBAAqBC,OAArB,CAA6B,CAA7B,EAAgCnC,GAAhC,CAAoCO,MAApC,KAA+C,CAH7F,EAIE;AACA;AACA2B,2BAAqBC,OAArB,CAA6B,CAA7B,EAAgCnC,GAAhC,CAAoCoC,OAApC,CAA4C,UAASC,MAAT,EAAiB;AAC3D;AACA,YAAIC,aAAaN,KAAKO,cAAL,CAAoBC,IAApB,CAAyB;AAAA,iBAAUC,OAAOC,UAAP,KAAsB,WAAhC;AAAA,SAAzB,EAAsEpD,IAAtE,CAA2E,CAA3E,CAAjB,CAF2D,CAEqC;;AAEhG;AACA,YAAIgD,UAAJ,EAAgB;AACd,cAAIpB,gBAAgBoB,WAAWpB,aAA/B;AACAoB,qBAAWK,MAAX,GAAoBrE,UAAUsE,MAAV,CAAiBC,IAArC;;AAEAR,iBAAOnB,aAAP,GAAuBA,aAAvB;AACAmB,iBAAOS,IAAP,GAAcR,WAAWhC,KAAzB;;AAEA;AACA,cAAIyC,mBAAmBV,OAAOW,GAA9B;AACA;AACA,cAAIC,eAAe,eAAeZ,OAAOa,IAAtB,GAA6B,gDAAhD;AACA;AACA,cAAIC,aAAaC,mBAAmBL,mBAAmBE,YAAtC,CAAjB;;AAEA;AACAjD,gBAAMvB,WAAW4E,SAAX,CAAqB,CAArB,CAAN;;AAEA;AACArD,cAAIsD,WAAJ,GAAkBjB,OAAOkB,EAAzB;AACAvD,cAAI0C,UAAJ,GAAiB3D,mBAAjB;AACAiB,cAAIwD,GAAJ,GAAUC,WAAWpB,OAAOqB,KAAlB,CAAV;;AAEA;AACA1D,cAAI2D,EAAJ,GAASR,UAAT;;AAEA;AACA,cAAI/C,OAAJ,EAAaC,QAAb;AACA,cAAKiC,WAAWhC,KAAX,CAAiBC,MAAjB,KAA4B,CAA7B,IAAoC,OAAO+B,WAAWhC,KAAX,CAAiB,CAAjB,CAAP,KAA+B,QAAnE,IAAiF,OAAOgC,WAAWhC,KAAX,CAAiB,CAAjB,CAAP,KAA+B,QAApH,EAA+H;AAC7H;AACAF,sBAAUkC,WAAWhC,KAAX,CAAiB,CAAjB,CAAV;AACAD,uBAAWiC,WAAWhC,KAAX,CAAiB,CAAjB,CAAX;AACD,WAJD,MAIO;AACL;AACAF,sBAAUkC,WAAWhC,KAAX,CAAiB,CAAjB,EAAoB,CAApB,CAAV;AACAD,uBAAWiC,WAAWhC,KAAX,CAAiB,CAAjB,EAAoB,CAApB,CAAX;AACD;;AAED;AACAN,cAAI4D,KAAJ,GAAYxD,OAAZ;AACAJ,cAAI6D,MAAJ,GAAaxD,QAAb;;AAEA;AACA3B,qBAAWoF,cAAX,CAA0B5C,aAA1B,EAAyClB,GAAzC;;AAEA;AACAd,yBAAe+B,IAAf,CAAoBC,aAApB;AACD;AACF,OApDD;AAqDD;;AAED;AACA,SAAK,IAAI6C,IAAI,CAAb,EAAgBA,IAAI9E,eAAesB,MAAnC,EAA2CwD,GAA3C,EAAgD;AAC9C,UAAIC,aAAa/E,eAAe8E,CAAf,CAAjB;AACA;AACA,UAAI7E,eAAe+E,OAAf,CAAuBD,UAAvB,MAAuC,CAAC,CAA5C,EAA+C;AAC7C;AACAhE,cAAMvB,WAAW4E,SAAX,CAAqB,CAArB,CAAN;AACArD,YAAI0C,UAAJ,GAAiB3D,mBAAjB;AACAL,mBAAWoF,cAAX,CAA0BE,UAA1B,EAAsChE,GAAtC;AACD;AACF;AACF,GA5ED;;AA8EA,SAAO;AACLkE,cAAU/E;AADL,GAAP;AAGD,CA9LD;;AAgMAP,eAAeuF,kBAAf,CAAkC,IAAItF,gBAAJ,EAAlC,EAA0D,WAA1D;;AAEAuF,OAAOC,OAAP,GAAiBxF,gBAAjB,C","file":"brightcomBidAdapter.js","sourcesContent":["var CONSTANTS = require('src/constants.json');\nvar utils = require('src/utils.js');\nvar bidfactory = require('src/bidfactory.js');\nvar bidmanager = require('src/bidmanager.js');\nvar adloader = require('src/adloader');\nvar adaptermanager = require('src/adaptermanager');\n\n/**\n * Adapter for requesting bids from Brightcom\n */\nvar BrightcomAdapter = function BrightcomAdapter() {\n  // Set Brightcom Bidder URL\n  var brightcomUrl = 'hb.iselephant.com/auc/ortb';\n\n  // Define the bidder code\n  var brightcomBidderCode = 'brightcom';\n\n  // Define the callback function\n  var brightcomCallbackFunction = 'window.pbjs=window.pbjs||window.parent.pbjs||window.top.pbjs;window.pbjs.brightcomResponse';\n\n  // Manage the requested and received ad units' codes, to know which are invalid (didn't return)\n  const reqAdUnitsCode = [];\n  const resAdUnitsCode = [];\n\n  function _callBids(params) {\n    var bidRequests = params.bids || [];\n\n    // Get page data\n    var siteDomain = window.location.host;\n    var sitePage = window.location.href;\n\n    // Prepare impressions object\n    var brightcomImps = [];\n\n    // Prepare a variable for publisher id\n    var pubId = '';\n\n    // Go through the requests and build array of impressions\n    utils._each(bidRequests, function(bid) {\n      // Get impression details\n      var tagId = utils.getBidIdParameter('tagId', bid.params);\n      var ref = utils.getBidIdParameter('ref', bid.params);\n      var adWidth = 0;\n      var adHeight = 0;\n\n      // If no publisher id is set, use the current\n      if (pubId === '') {\n        // Get the current publisher id (if it doesn't exist, it'll return '')\n        pubId = utils.getBidIdParameter('pubId', bid.params);\n      }\n\n      // Brightcom supports only 1 size per impression\n      // Check if the array contains 1 size or array of sizes\n      if (bid.sizes.length === 2 && typeof bid.sizes[0] === 'number' && typeof bid.sizes[1] === 'number') {\n        // The array contains 1 size (the items are the values)\n        adWidth = bid.sizes[0];\n        adHeight = bid.sizes[1];\n      } else {\n        // The array contains array of sizes, use the first size\n        adWidth = bid.sizes[0][0];\n        adHeight = bid.sizes[0][1];\n      }\n\n      // Build the impression\n      var imp = {\n        id: utils.getUniqueIdentifierStr(),\n        banner: {\n          w: adWidth,\n          h: adHeight\n        },\n        tagid: tagId\n      };\n\n      // If ref exists, create it (in the \"ext\" object)\n      if (ref !== '') {\n        imp.ext = {\n          refoverride: ref\n        };\n      }\n\n      // Add current impression to collection\n      brightcomImps.push(imp);\n      // Add mapping to current bid via impression id\n      // bidmanager.pbCallbackMap[imp.id] = bid;\n\n      // Add current ad unit's code to tracking\n      reqAdUnitsCode.push(bid.placementCode);\n    });\n\n    // Build the bid request\n    var brightcomBidReq = {\n      id: utils.getUniqueIdentifierStr(),\n      imp: brightcomImps,\n      site: {\n        publisher: {\n          id: pubId\n        },\n        domain: siteDomain,\n        page: sitePage\n      }\n    };\n\n    // Add timeout data, if available\n    var PREBID_TIMEOUT = PREBID_TIMEOUT || 0;\n    var curTimeout = PREBID_TIMEOUT;\n    if (curTimeout > 0) {\n      brightcomBidReq.tmax = curTimeout;\n    }\n\n    // Define the bid request call URL\n    var bidRequestCallUrl = 'https://' + brightcomUrl +\n        '?callback=' + encodeURIComponent(brightcomCallbackFunction) +\n        '&request=' + encodeURIComponent(JSON.stringify(brightcomBidReq));\n\n    // Add the call to get the bid\n    adloader.loadScript(bidRequestCallUrl);\n  }\n\n  // expose the callback to the global object:\n  pbjs.brightcomResponse = function(brightcomResponseObj) {\n    var bid = {};\n\n    // Make sure response is valid\n    if (\n      (brightcomResponseObj) && (brightcomResponseObj.id) &&\n        (brightcomResponseObj.seatbid) && (brightcomResponseObj.seatbid.length !== 0) &&\n        (brightcomResponseObj.seatbid[0].bid) && (brightcomResponseObj.seatbid[0].bid.length !== 0)\n    ) {\n      // Go through the received bids\n      brightcomResponseObj.seatbid[0].bid.forEach(function(curBid) {\n        // Get the bid request data\n        var bidRequest = pbjs._bidsRequested.find(bidSet => bidSet.bidderCode === 'brightcom').bids[0]; // this assumes a single request only\n\n        // Make sure the bid exists\n        if (bidRequest) {\n          var placementCode = bidRequest.placementCode;\n          bidRequest.status = CONSTANTS.STATUS.GOOD;\n\n          curBid.placementCode = placementCode;\n          curBid.size = bidRequest.sizes;\n\n          // Get the creative\n          var responseCreative = curBid.adm;\n          // Build the NURL element\n          var responseNurl = '<img src=\"' + curBid.nurl + '\" width=\"1\" height=\"1\" style=\"display:none\" />';\n          // Build the ad to display:\n          var responseAd = decodeURIComponent(responseCreative + responseNurl);\n\n          // Create a valid bid\n          bid = bidfactory.createBid(1);\n\n          // Set the bid data\n          bid.creative_id = curBid.Id;\n          bid.bidderCode = brightcomBidderCode;\n          bid.cpm = parseFloat(curBid.price);\n\n          // Brightcom tag is in <script> block, so use bid.ad, not bid.adurl\n          bid.ad = responseAd;\n\n          // Since Brightcom currently supports only 1 size, if multiple sizes are provided - take the first\n          var adWidth, adHeight;\n          if ((bidRequest.sizes.length === 2) && (typeof bidRequest.sizes[0] === 'number') && (typeof bidRequest.sizes[1] === 'number')) {\n            // Only one size is provided\n            adWidth = bidRequest.sizes[0];\n            adHeight = bidRequest.sizes[1];\n          } else {\n            // And array of sizes is provided. Take the first.\n            adWidth = bidRequest.sizes[0][0];\n            adHeight = bidRequest.sizes[0][1];\n          }\n\n          // Set the ad's width and height\n          bid.width = adWidth;\n          bid.height = adHeight;\n\n          // Add the bid\n          bidmanager.addBidResponse(placementCode, bid);\n\n          // Add current ad unit's code to tracking\n          resAdUnitsCode.push(placementCode);\n        }\n      });\n    }\n\n    // Define all unreceived ad unit codes as invalid (if Brightcom don't want to bid on an impression, it won't include it in the response)\n    for (var i = 0; i < reqAdUnitsCode.length; i++) {\n      var adUnitCode = reqAdUnitsCode[i];\n      // Check if current ad unit code was NOT received\n      if (resAdUnitsCode.indexOf(adUnitCode) === -1) {\n        // Current ad unit wasn't returned. Define it as invalid.\n        bid = bidfactory.createBid(2);\n        bid.bidderCode = brightcomBidderCode;\n        bidmanager.addBidResponse(adUnitCode, bid);\n      }\n    }\n  };\n\n  return {\n    callBids: _callBids\n  };\n};\n\nadaptermanager.registerBidAdapter(new BrightcomAdapter(), 'brightcom');\n\nmodule.exports = BrightcomAdapter;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/brightcomBidAdapter.js"],"sourceRoot":""}