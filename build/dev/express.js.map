{"version":3,"sources":["webpack:///./modules/express.js"],"names":["utils","MODULE_NAME","pbjs","express","adUnits","logMessage","length","logWarn","gptSlotCache","adUnitsCache","reduce","cache","adUnit","code","bids","logError","window","googletag","cmd","push","gpt","pads","pubads","display","enableServices","refresh","disableInitialLoad","getSlots","enableSingleRequest","mapGptSlotSizes","aGPTSlotSizes","aSlotSizes","i","getWidth","getHeight","e","toString","defaultSlots","slots","Array","isArray","slice","pickAdUnits","gptSlots","gptSlot","elemId","getSlotElementId","sizes","getSizes","splice","fGptDisplay","fGptEnableServices","fGptRefresh","fGptDisableInitialLoad","fGptEnableSingleRequest","bInitialLoadDisabled","apply","arguments","sElementId","logInfo","aGptSlots","bEnabledSRA","filter","oGptSlot","_displayed","forEach","requestBids","bidsBackHandler","setTargetingForGPTAsync","map","options"],"mappings":"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","file":"express.js","sourcesContent":["\nimport * as utils from 'src/utils';\n\nconst MODULE_NAME = 'express';\n\n/**\n * Express Module\n *\n * The express module allows the initiation of Prebid.js auctions automatically based on calls such as gpt.defineSlot.\n * It works by monkey-patching the gpt methods and overloading their functionality.  In order for this module to be\n * used gpt must be included in the page, this module must be included in the Prebid.js bundle, and a call to\n * pbjs.express() must be made.\n *\n * @param {Object[]} [adUnits = pbjs.adUnits] - an array of adUnits for express to operate on.\n */\npbjs.express = function(adUnits = pbjs.adUnits) {\n  utils.logMessage('loading ' + MODULE_NAME);\n\n  if (adUnits.length === 0) {\n    utils.logWarn('no valid adUnits found, not loading ' + MODULE_NAME);\n  }\n\n  // store gpt slots in a more performant hash lookup by elementId (adUnit code)\n  var gptSlotCache = {};\n  // put adUnits in a more performant hash lookup by code.\n  var adUnitsCache = adUnits.reduce(function (cache, adUnit) {\n    if (adUnit.code && adUnit.bids) {\n      cache[adUnit.code] = adUnit;\n    } else {\n      utils.logError('misconfigured adUnit', null, adUnit);\n    }\n    return cache;\n  }, {});\n\n  window.googletag = window.googletag || {};\n  window.googletag.cmd = window.googletag.cmd || [];\n  window.googletag.cmd.push(function () {\n    // verify all necessary gpt functions exist\n    var gpt = window.googletag;\n    var pads = gpt.pubads;\n    if (!gpt.display || !gpt.enableServices || typeof pads !== 'function' || !pads().refresh || !pads().disableInitialLoad || !pads().getSlots || !pads().enableSingleRequest) {\n      utils.logError('could not bind to gpt googletag api');\n      return;\n    }\n    utils.logMessage('running');\n\n    // function to convert google tag slot sizes to [[w,h],...]\n    function mapGptSlotSizes(aGPTSlotSizes) {\n      var aSlotSizes = [];\n      for (var i = 0; i < aGPTSlotSizes.length; i++) {\n        try {\n          aSlotSizes.push([aGPTSlotSizes[i].getWidth(), aGPTSlotSizes[i].getHeight()]);\n        } catch (e) {\n          utils.logWarn('slot size ' + aGPTSlotSizes[i].toString() + ' not supported by' + MODULE_NAME);\n        }\n      }\n      return aSlotSizes;\n    }\n\n    // a helper function to verify slots or get slots if not present\n    function defaultSlots(slots) {\n      return Array.isArray(slots)\n        ? slots.slice()\n        : googletag.pubads().getSlots().slice();\n    }\n\n    // maps gpt slots to adUnits, matches are copied to new array and removed from passed array.\n    function pickAdUnits(gptSlots) {\n      var adUnits = [];\n      // traverse backwards (since gptSlots is mutated) to find adUnits in cache and remove non-mapped slots\n      for (var i = gptSlots.length - 1; i > -1; i--) {\n        const gptSlot = gptSlots[i];\n        const elemId = gptSlot.getSlotElementId();\n        const adUnit = adUnitsCache[elemId];\n\n        if (adUnit) {\n          gptSlotCache[elemId] = gptSlot; // store by elementId\n          adUnit.sizes = adUnit.sizes || mapGptSlotSizes(gptSlot.getSizes());\n          adUnits.push(adUnit);\n          gptSlots.splice(i, 1);\n        }\n      }\n\n      return adUnits;\n    }\n\n    // store original gpt functions that will be overridden\n    var fGptDisplay = gpt.display;\n    var fGptEnableServices = gpt.enableServices;\n    var fGptRefresh = pads().refresh;\n    var fGptDisableInitialLoad = pads().disableInitialLoad;\n    var fGptEnableSingleRequest = pads().enableSingleRequest;\n\n    // override googletag.enableServices()\n    //  - make sure fGptDisableInitialLoad() has been called so we can\n    //     better control when slots are displayed, then call original\n    //     fGptEnableServices()\n    gpt.enableServices = function () {\n      if (!bInitialLoadDisabled) {\n        fGptDisableInitialLoad.apply(pads());\n      }\n      return fGptEnableServices.apply(gpt, arguments);\n    };\n\n    // override googletag.display()\n    //  - call the real fGptDisplay(). this won't initiate auctions because we've disabled initial load\n    //  - define all corresponding rubicon slots\n    //  - if disableInitialLoad() has been called by the pub, done\n    //  - else run an auction and call the real fGptRefresh() to\n    //       initiate the DFP request\n    gpt.display = function (sElementId) {\n      utils.logInfo('display:', sElementId);\n      // call original gpt display() function\n      fGptDisplay.apply(gpt, arguments);\n\n      // if not SRA mode, get only the gpt slot corresponding to sEementId\n      var aGptSlots;\n      if (!bEnabledSRA) {\n        aGptSlots = googletag.pubads().getSlots().filter(function (oGptSlot) {\n          return oGptSlot.getSlotElementId() === sElementId;\n        });\n      }\n\n      aGptSlots = defaultSlots(aGptSlots).filter(function (gptSlot) {\n        return !gptSlot._displayed;\n      });\n\n      aGptSlots.forEach(function (gptSlot) {\n        gptSlot._displayed = true;\n      });\n\n      var adUnits = pickAdUnits(/* mutated: */ aGptSlots);\n\n      if (!bInitialLoadDisabled) {\n        if (aGptSlots.length) {\n          fGptRefresh.apply(pads(), [aGptSlots]);\n        }\n\n        if (adUnits.length) {\n          pbjs.requestBids({\n            adUnits: adUnits,\n            bidsBackHandler: function () {\n              pbjs.setTargetingForGPTAsync();\n              fGptRefresh.apply(pads(), [\n                adUnits.map(function (adUnit) {\n                  return gptSlotCache[adUnit.code];\n                })\n              ]);\n            }\n          });\n        }\n      }\n    };\n\n    // override gpt refresh() function\n    // - run auctions for provided gpt slots, then initiate ad-server call\n    pads().refresh = function (aGptSlots, options) {\n      utils.logInfo('refresh:', aGptSlots);\n      // get already displayed adUnits from aGptSlots if provided, else all defined gptSlots\n      aGptSlots = defaultSlots(aGptSlots);\n      var adUnits = pickAdUnits(/* mutated: */ aGptSlots).filter(function (adUnit) {\n        return gptSlotCache[adUnit.code]._displayed;\n      });\n\n      if (aGptSlots.length) {\n        fGptRefresh.apply(pads(), [aGptSlots, options]);\n      }\n\n      if (adUnits.length) {\n        pbjs.requestBids({\n          adUnits: adUnits,\n          bidsBackHandler: function () {\n            pbjs.setTargetingForGPTAsync();\n            fGptRefresh.apply(pads(), [\n              adUnits.map(function (adUnit) {\n                return gptSlotCache[adUnit.code];\n              }),\n              options\n            ]);\n          }\n        });\n      }\n    };\n\n    // override gpt disableInitialLoad function\n    // Register that initial load was called, meaning calls to display()\n    // should not initiate an ad-server request.  Instead a call to\n    // refresh() will be needed to iniate the request.\n    //  We will assume the pub is using this the correct way, calling it\n    //  before enableServices()\n    var bInitialLoadDisabled = false;\n    pads().disableInitialLoad = function () {\n      bInitialLoadDisabled = true;\n      return fGptDisableInitialLoad.apply(window.googletag.pubads(), arguments);\n    };\n\n    // override gpt useSingleRequest function\n    // Register that SRA has been turned on\n    //  We will assume the pub is using this the correct way, calling it\n    //  before enableServices()\n    var bEnabledSRA = false;\n    pads().enableSingleRequest = function () {\n      bEnabledSRA = true;\n      return fGptEnableSingleRequest.apply(window.googletag.pubads(), arguments);\n    };\n  });\n};\n\n\n\n// WEBPACK FOOTER //\n// ./modules/express.js"],"sourceRoot":""}