{"version":3,"sources":["webpack:///./modules/vertamediaBidAdapter.js"],"names":["utils","URL","BIDDER_CODE","spec","code","supportedMediaTypes","isBidRequestValid","bid","Boolean","params","aid","buildRequests","bidRequests","bidderRequest","map","data","prepareRTBRequestParams","method","url","interpretResponse","serverResponse","body","isInvalidValidResp","bids","length","videoMediaType","deepAccess","context","isMediaTypeOutstream","extMessage","ext","message","errorMessage","bidderCode","logError","forEach","serverBid","cpm","createBid","push","size","getSize","sizes","domain","getTopWindowLocation","hostname","callbackId","bidId","h","height","w","width","requestSizes","parseSizesInput","parsed","parsedSize","toUpperCase","split","parseInt","undefined","bidResponse","requestId","creativeId","cmpId","vastUrl","currency","cur","mediaType","netRevenue","ttl","adResponse","renderer","newRenderer","install","id","loaded","setRender","outstreamRender","window","VOutstreamAPI","initOutstreams","elId","adUnitCode"],"mappings":"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","file":"vertamediaBidAdapter.js","sourcesContent":["import * as utils from 'src/utils';\nimport {registerBidder} from 'src/adapters/bidderFactory';\nimport {VIDEO} from 'src/mediaTypes';\nimport {Renderer} from 'src/Renderer';\n\nconst URL = '//rtb.vertamedia.com/hb/';\nconst BIDDER_CODE = 'vertamedia';\n\nexport const spec = {\n  code: BIDDER_CODE,\n  supportedMediaTypes: [VIDEO],\n  isBidRequestValid: function (bid) {\n    return Boolean(bid && bid.params && bid.params.aid);\n  },\n\n  /**\n   * Make a server request from the list of BidRequests\n   * @param bidRequests\n   * @param bidderRequest\n   */\n  buildRequests: function (bidRequests, bidderRequest) {\n    return bidRequests.map((bid) => {\n      return {\n        data: prepareRTBRequestParams(bid),\n        bidderRequest,\n        method: 'GET',\n        url: URL\n      }\n    });\n  },\n\n  /**\n   * Unpack the response from the server into a list of bids\n   * @param serverResponse\n   * @param bidderRequest\n   * @return {Bid[]} An array of bids which were nested inside the server\n   */\n  interpretResponse: function (serverResponse, {bidderRequest}) {\n    serverResponse = serverResponse.body;\n    const isInvalidValidResp = !serverResponse || !serverResponse.bids || !serverResponse.bids.length;\n    const videoMediaType = utils.deepAccess(bidderRequest.bids[0], 'mediaTypes.video');\n    const context = utils.deepAccess(bidderRequest.bids[0], 'mediaTypes.video.context');\n    const isMediaTypeOutstream = (videoMediaType && context === 'outstream');\n\n    let bids = [];\n\n    if (isInvalidValidResp) {\n      let extMessage = serverResponse && serverResponse.ext && serverResponse.ext.message ? `: ${serverResponse.ext.message}` : '';\n      let errorMessage = `in response for ${bidderRequest.bidderCode} adapter ${extMessage}`;\n\n      utils.logError(errorMessage);\n\n      return bids;\n    }\n\n    serverResponse.bids.forEach(serverBid => {\n      if (serverBid.cpm !== 0) {\n        const bid = createBid(isMediaTypeOutstream, serverBid);\n        bids.push(bid);\n      }\n    });\n\n    return bids;\n  },\n};\n\n/**\n * Prepare all parameters for request\n * @param bid {object}\n * @returns {object}\n */\nfunction prepareRTBRequestParams(bid) {\n  let size = getSize(bid.sizes);\n\n  return {\n    domain: utils.getTopWindowLocation().hostname,\n    callbackId: bid.bidId,\n    aid: bid.params.aid,\n    h: size.height,\n    w: size.width\n  };\n}\n\n/**\n * Prepare size for request\n * @param requestSizes {array}\n * @returns {object} bid The bid to validate\n */\nfunction getSize(requestSizes) {\n  const size = utils.parseSizesInput(requestSizes)[0];\n  const parsed = {};\n\n  if (typeof size !== 'string') {\n    return parsed;\n  }\n\n  let parsedSize = size.toUpperCase().split('X');\n\n  return {\n    height: parseInt(parsedSize[1], 10) || undefined,\n    width: parseInt(parsedSize[0], 10) || undefined\n  };\n}\n\n/**\n * Configure new bid by response\n * @param isMediaTypeOutstream {boolean}\n * @param bidResponse {object}\n * @returns {object}\n */\nfunction createBid(isMediaTypeOutstream, bidResponse) {\n  let bid = {\n    requestId: bidResponse.requestId,\n    creativeId: bidResponse.cmpId,\n    vastUrl: bidResponse.vastUrl,\n    height: bidResponse.height,\n    currency: bidResponse.cur,\n    width: bidResponse.width,\n    cpm: bidResponse.cpm,\n    mediaType: 'video',\n    netRevenue: true,\n    ttl: 3600\n  };\n\n  if (isMediaTypeOutstream) {\n    Object.assign(bid, {\n      adResponse: bidResponse,\n      renderer: newRenderer(bidResponse.requestId)\n    });\n  }\n\n  return bid;\n}\n\nfunction newRenderer(requestId) {\n  const renderer = Renderer.install({\n    id: requestId,\n    url: '//player.vertamedia.com/outstream-unit/2.01/outstream.min.js',\n    loaded: false,\n  });\n\n  renderer.setRender(outstreamRender);\n\n  return renderer;\n}\n\nfunction outstreamRender(bid) {\n  bid.renderer.push(() => {\n    window.VOutstreamAPI.initOutstreams([{\n      width: bid.width,\n      height: bid.height,\n      vastUrl: bid.vastUrl,\n      elId: bid.adUnitCode\n    }]);\n  });\n}\n\nregisterBidder(spec);\n\n\n\n// WEBPACK FOOTER //\n// ./modules/vertamediaBidAdapter.js"],"sourceRoot":""}