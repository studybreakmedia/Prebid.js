{"version":3,"sources":["webpack:///./modules/tremorBidAdapter.js"],"names":["utils","ENDPOINT","OPTIONAL_PARAMS","TremorAdapter","baseAdapter","callBids","bidRequest","bids","filter","valid","bid","map","url","generateUrl","handleResponse","response","method","withCredentials","width","height","isArray","sizes","length","isNaN","scheme","document","location","protocol","params","supplyCode","adCode","encodeURIComponent","href","forEach","param","bidReq","bidResult","JSON","parse","error","logError","errorMessage","getBidderCode","addBidResponse","placementCode","createBid","NO_BID","seatbid","status","GOOD","tag","reqBid","code","bidderCode","cpm","price","crid","vastXml","adm","mediaType","setBidderCode","registerBidAdapter","supportedMediaTypes","module","exports"],"mappings":"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","file":"tremorBidAdapter.js","sourcesContent":["/*\n* Tremor Video bid Adapter for prebid.js\n* */\n\nimport Adapter from 'src/adapter';\nimport bidfactory from 'src/bidfactory';\nimport bidmanager from 'src/bidmanager';\nimport * as utils from 'src/utils';\nimport {ajax} from 'src/ajax';\nimport {STATUS} from 'src/constants';\nimport adaptermanager from 'src/adaptermanager';\n\nconst ENDPOINT = '.ads.tremorhub.com/ad/tag';\n\nconst OPTIONAL_PARAMS = [\n  'mediaId', 'mediaUrl', 'mediaTitle', 'contentLength', 'floor',\n  'efloor', 'custom', 'categories', 'keywords', 'blockDomains',\n  'c2', 'c3', 'c4', 'skip', 'skipmin', 'skipafter', 'delivery',\n  'placement', 'videoMinBitrate', 'videoMaxBitrate'\n];\n\n/**\n * Bidder adapter Tremor Video. Given the list of all ad unit tag IDs,\n * sends out a bid request. When a bid response is back, registers the bid\n * to Prebid.js.\n * Steps:\n * - Format and send the bid request\n * - Evaluate and handle the response\n * - Store potential VAST markup\n * - Send request to ad server\n * - intercept ad server response\n * - Check if the vast wrapper URL is http://cdn.tremorhub.com/static/dummy.xml\n * - If yes: then render the locally stored VAST markup by directly passing it to your player\n * - Else: give the player the VAST wrapper from your ad server\n */\nfunction TremorAdapter() {\n  let baseAdapter = new Adapter('tremor');\n\n  /* Prebid executes this function when the page asks to send out bid requests */\n  baseAdapter.callBids = function (bidRequest) {\n    const bids = bidRequest.bids || [];\n    bids.filter(bid => valid(bid))\n      .map(bid => {\n        let url = generateUrl(bid);\n        if (url) {\n          ajax(url, response => {\n            handleResponse(bid, response);\n          }, null, {method: 'GET', withCredentials: true});\n        }\n      });\n  };\n\n  /**\n   * Generates the url based on the parameters given. Sizes are required.\n   * The format is: [L,W] or [[L1,W1],...]\n   * @param bid\n   * @returns {string}\n   */\n  function generateUrl(bid) {\n    // get the sizes\n    let width, height;\n    if (utils.isArray(bid.sizes) && bid.sizes.length === 2 && (!isNaN(bid.sizes[0]) && !isNaN(bid.sizes[1]))) {\n      width = bid.sizes[0];\n      height = bid.sizes[1];\n    } else if (typeof bid.sizes === 'object') {\n      // take the primary (first) size from the array\n      width = bid.sizes[0][0];\n      height = bid.sizes[0][1];\n    }\n    if (width && height) {\n      let scheme = ((document.location.protocol === 'https:') ? 'https' : 'http') + '://';\n      let url = scheme + bid.params.supplyCode + ENDPOINT + '?adCode=' + bid.params.adCode;\n\n      url += ('&playerWidth=' + width);\n      url += ('&playerHeight=' + height);\n      url += ('&srcPageUrl=' + encodeURIComponent(document.location.href));\n\n      OPTIONAL_PARAMS.forEach(param => {\n        if (bid.params[param]) {\n          url += ('&' + param + '=' + bid.params[param]);\n        }\n      });\n\n      url = (url + '&fmt=json');\n\n      return url;\n    }\n  }\n\n  /* Notify Prebid of bid responses so bids can get in the auction */\n  function handleResponse(bidReq, response) {\n    let bidResult;\n\n    try {\n      bidResult = JSON.parse(response);\n    } catch (error) {\n      utils.logError(error);\n    }\n\n    if (!bidResult || bidResult.error) {\n      let errorMessage = `in response for ${baseAdapter.getBidderCode()} adapter`;\n      if (bidResult && bidResult.error) {\n        errorMessage += `: ${bidResult.error}`;\n      }\n      utils.logError(errorMessage);\n\n      // signal this response is complete\n      bidmanager.addBidResponse(bidReq.placementCode, createBid(STATUS.NO_BID));\n    }\n\n    if (bidResult.seatbid && bidResult.seatbid.length > 0) {\n      bidResult.seatbid[0].bid.forEach(tag => {\n        let status = STATUS.GOOD;\n        const bid = createBid(status, bidReq, tag);\n        bidmanager.addBidResponse(bidReq.placementCode, bid);\n      });\n    } else {\n      // signal this response is complete with no bid\n      bidmanager.addBidResponse(bidReq.placementCode, createBid(STATUS.NO_BID));\n    }\n  }\n\n  /**\n   * We require the ad code and the supply code to generate a tag url\n   * @param bid\n   * @returns {*}\n   */\n  function valid(bid) {\n    if (bid.params.adCode && bid.params.supplyCode) {\n      return bid;\n    } else {\n      utils.logError('missing bid params');\n    }\n  }\n\n  /**\n   * Create and return a bid object based on status and tag\n   * @param status\n   * @param reqBid\n   * @param response\n   */\n  function createBid(status, reqBid, response) {\n    let bid = bidfactory.createBid(status, reqBid);\n    bid.code = baseAdapter.getBidderCode();\n    bid.bidderCode = baseAdapter.getBidderCode();\n\n    if (response) {\n      bid.cpm = response.price;\n      bid.crid = response.crid;\n      bid.vastXml = response.adm;\n      bid.mediaType = 'video';\n    }\n\n    return bid;\n  }\n\n  return Object.assign(this, {\n    callBids: baseAdapter.callBids,\n    setBidderCode: baseAdapter.setBidderCode,\n  });\n}\n\nadaptermanager.registerBidAdapter(new TremorAdapter(), 'tremor', {\n  supportedMediaTypes: ['video']\n});\n\nmodule.exports = TremorAdapter;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/tremorBidAdapter.js"],"sourceRoot":""}