{"version":3,"sources":["webpack:///./modules/currency.js"],"names":["setConfig","addBidResponseHook","utils","DEFAULT_CURRENCY_RATE_URL","CURRENCY_RATE_PRECISION","bidResponseQueue","conversionCache","currencyRatesLoaded","adServerCurrency","currencySupportEnabled","currencyRates","bidderCurrencyDefault","config","url","rates","conversions","logInfo","arguments","conversionRateFile","initCurrency","resetCurrency","getConfig","currency","addBidResponse","addHook","response","JSON","parse","stringify","processBidResponseQueue","e","logError","removeHook","adUnitCode","bid","fn","apply","bidder","bidderCode","currencyDefault","logWarn","push","wrapFunction","length","shift","context","params","undefined","fromCurrency","conversion","getCurrencyConversion","originalCpm","cpm","originalCurrency","parseFloat","toFixed","createBid","NO_BID","bidId","adId","conversionRate","logMessage","Error","toCurrency","roundFloat","anyBaseCurrency","Object","keys","toIntermediateConversionRate","fromIntermediateConversionRate","num","dec","d","i","Math","round"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;QAgDgBA,S,GAAAA,S;QA+DAC,kB,GAAAA,kB;;AA/GhB;;;;AACA;;AACA;;AACA;;IAAYC,K;;AACZ;;;;AACA;;;;;;AAEA,IAAMC,4BAA4B,wCAAlC;AACA,IAAMC,0BAA0B,CAAhC;;AAEA,IAAIC,mBAAmB,EAAvB;AACA,IAAIC,kBAAkB,EAAtB;AACA,IAAIC,sBAAsB,KAA1B;AACA,IAAIC,mBAAmB,KAAvB;;AAEO,IAAIC,0DAAyB,KAA7B;AACA,IAAIC,wCAAgB,EAApB;AACP,IAAIC,wBAAwB,EAA5B;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BO,SAASX,SAAT,CAAmBY,MAAnB,EAA2B;AAChC,MAAIC,MAAMV,yBAAV;;AAEA,MAAI,QAAOS,OAAOE,KAAd,MAAwB,QAA5B,EAAsC;AACpCJ,kBAAcK,WAAd,GAA4BH,OAAOE,KAAnC;AACAP,0BAAsB,IAAtB;AACD;;AAED,MAAI,OAAOK,OAAOJ,gBAAd,KAAmC,QAAvC,EAAiD;AAC/CN,UAAMc,OAAN,CAAc,2BAAd,EAA2CC,SAA3C;;AAEAT,uBAAmBI,OAAOJ,gBAA1B;AACA,QAAII,OAAOM,kBAAX,EAA+B;AAC7BhB,YAAMc,OAAN,CAAc,6CAAd,EAA6DJ,OAAOM,kBAApE;AACAL,YAAMD,OAAOM,kBAAb;AACD;AACDC,iBAAaN,GAAb;AACD,GATD,MASO;AACL;AACAX,UAAMc,OAAN,CAAc,4BAAd;AACAI;AACD;AACD,MAAI,QAAOR,OAAOD,qBAAd,MAAwC,QAA5C,EAAsD;AACpDA,4BAAwBC,OAAOD,qBAA/B;AACD;AACF;AACD,eAAOU,SAAP,CAAiB,UAAjB,EAA6B;AAAA,SAAUrB,UAAUY,OAAOU,QAAjB,CAAV;AAAA,CAA7B;;AAEA,SAASH,YAAT,CAAsBN,GAAtB,EAA2B;AACzBP,oBAAkB,EAAlB;AACA,UA/DSG,sBA+DT,4BAAyB,IAAzB;;AAEAP,QAAMc,OAAN,CAAc,yDAAd,EAAyEC,SAAzE;;AAEA,0BAAWM,cAAX,CAA0BC,OAA1B,CAAkCvB,kBAAlC,EAAsD,GAAtD;;AAEA,MAAI,CAACS,cAAcK,WAAnB,EAAgC;AAC9B,oBAAKF,GAAL,EAAU,UAAUY,QAAV,EAAoB;AAC5B,UAAI;AACF,gBAvEGf,aAuEH,mBAAgBgB,KAAKC,KAAL,CAAWF,QAAX,CAAhB;AACAvB,cAAMc,OAAN,CAAc,0BAA0BU,KAAKE,SAAL,CAAelB,aAAf,CAAxC;AACAH,8BAAsB,IAAtB;AACAsB;AACD,OALD,CAKE,OAAOC,CAAP,EAAU;AACV5B,cAAM6B,QAAN,CAAe,6CAA6CN,QAA5D;AACD;AACF,KATD;AAUD;AACF;;AAED,SAASL,aAAT,GAAyB;AACvBlB,QAAMc,OAAN,CAAc,2DAAd,EAA2EC,SAA3E;;AAEA,0BAAWM,cAAX,CAA0BS,UAA1B,CAAqC/B,kBAArC;;AAEAO,qBAAmB,KAAnB;AACAF,oBAAkB,EAAlB;AACA,UA1FSG,sBA0FT,4BAAyB,KAAzB;AACAF,wBAAsB,KAAtB;AACA,UA3FSG,aA2FT,mBAAgB,EAAhB;AACAC,0BAAwB,EAAxB;AACD;;AAEM,SAASV,kBAAT,CAA4BgC,UAA5B,EAAwCC,GAAxC,EAA6CC,EAA7C,EAAiD;AACtD,MAAI,CAACD,GAAL,EAAU;AACR,WAAOC,GAAGC,KAAH,CAAS,IAAT,EAAenB,SAAf,CAAP,CADQ,CAC0B;AACnC;;AAED,MAAIoB,SAASH,IAAII,UAAJ,IAAkBJ,IAAIG,MAAnC;AACA,MAAI1B,sBAAsB0B,MAAtB,CAAJ,EAAmC;AACjC,QAAIE,kBAAkB5B,sBAAsB0B,MAAtB,CAAtB;AACA,QAAIH,IAAIZ,QAAJ,IAAgBiB,oBAAoBL,IAAIZ,QAA5C,EAAsD;AACpDpB,YAAMsC,OAAN,yBAAmCH,MAAnC,UAA8CE,eAA9C,wCAA8FL,IAAIZ,QAAlG;AACD,KAFD,MAEO;AACLY,UAAIZ,QAAJ,GAAeiB,eAAf;AACD;AACF;;AAED;AACA,MAAI,CAACL,IAAIZ,QAAT,EAAmB;AACjBpB,UAAMsC,OAAN,CAAc,oDAAd;AACAN,QAAIZ,QAAJ,GAAe,KAAf;AACD;;AAED;AACA,MAAIY,IAAIZ,QAAJ,KAAiBd,gBAArB,EAAuC;AACrC,WAAO2B,GAAGC,KAAH,CAAS,IAAT,EAAenB,SAAf,CAAP;AACD;;AAEDZ,mBAAiBoC,IAAjB,CAAsBC,aAAaP,EAAb,EAAiB,IAAjB,EAAuBlB,SAAvB,CAAtB;AACA,MAAI,CAACR,sBAAD,IAA2BF,mBAA/B,EAAoD;AAClDsB;AACD;AACF;;AAED,SAASA,uBAAT,GAAmC;AACjC,SAAOxB,iBAAiBsC,MAAjB,GAA0B,CAAjC,EAAoC;AACjCtC,qBAAiBuC,KAAjB,EAAD;AACD;AACF;;AAED,SAASF,YAAT,CAAsBP,EAAtB,EAA0BU,OAA1B,EAAmCC,MAAnC,EAA2C;AACzC,SAAO,YAAW;AAChB,QAAIZ,MAAMY,OAAO,CAAP,CAAV;AACA,QAAIZ,QAAQa,SAAR,IAAqB,cAAcb,GAAnC,IAA0C,SAASA,GAAvD,EAA4D;AAC1D,UAAIc,eAAed,IAAIZ,QAAvB;AACA,UAAI;AACF,YAAI2B,aAAaC,sBAAsBF,YAAtB,CAAjB;AACAd,YAAIiB,WAAJ,GAAkBjB,IAAIkB,GAAtB;AACAlB,YAAImB,gBAAJ,GAAuBnB,IAAIZ,QAA3B;AACA,YAAI2B,eAAe,CAAnB,EAAsB;AACpBf,cAAIkB,GAAJ,GAAU,CAACE,WAAWpB,IAAIkB,GAAf,IAAsBH,UAAvB,EAAmCM,OAAnC,CAA2C,CAA3C,CAAV;AACArB,cAAIZ,QAAJ,GAAed,gBAAf;AACD;AACF,OARD,CAQE,OAAOsB,CAAP,EAAU;AACV5B,cAAMsC,OAAN,CAAc,uDAAd,EAAuEV,CAAvE;AACAgB,eAAO,CAAP,IAAY,wBAAWU,SAAX,CAAqB,kBAAOC,MAA5B,EAAoC;AAC9CpB,kBAAQH,IAAII,UAAJ,IAAkBJ,IAAIG,MADgB;AAE9CqB,iBAAOxB,IAAIyB;AAFmC,SAApC,CAAZ;AAID;AACF;AACD,WAAOxB,GAAGC,KAAH,CAASS,OAAT,EAAkBC,MAAlB,CAAP;AACD,GArBD;AAsBD;;AAED,SAASI,qBAAT,CAA+BF,YAA/B,EAA6C;AAC3C,MAAIY,iBAAiB,IAArB;AACA,MAAI9C,KAAJ;;AAEA,MAAIkC,gBAAgB1C,eAApB,EAAqC;AACnCsD,qBAAiBtD,gBAAgB0C,YAAhB,CAAjB;AACA9C,UAAM2D,UAAN,CAAiB,iCAAiCD,cAAjC,GAAkD,oBAAlD,GAAyEZ,YAA1F;AACD,GAHD,MAGO,IAAIvC,2BAA2B,KAA/B,EAAsC;AAC3C,QAAIuC,iBAAiB,KAArB,EAA4B;AAC1BY,uBAAiB,CAAjB;AACD,KAFD,MAEO;AACL,YAAM,IAAIE,KAAJ,CAAU,0EAAV,CAAN;AACD;AACF,GANM,MAMA,IAAId,iBAAiBxC,gBAArB,EAAuC;AAC5CoD,qBAAiB,CAAjB;AACD,GAFM,MAEA;AACL,QAAIG,aAAavD,gBAAjB;;AAEA,QAAIwC,gBAAgBtC,cAAcK,WAAlC,EAA+C;AAC7C;AACAD,cAAQJ,cAAcK,WAAd,CAA0BiC,YAA1B,CAAR;AACA,UAAI,EAAEe,cAAcjD,KAAhB,CAAJ,EAA4B;AAC1B;AACA,cAAM,IAAIgD,KAAJ,CAAU,4CAA4CC,UAA5C,GAAyD,yCAAnE,CAAN;AACD;AACDH,uBAAiB9C,MAAMiD,UAAN,CAAjB;AACA7D,YAAMc,OAAN,CAAc,wCAAwCgC,YAAxC,GAAuD,MAAvD,GAAgEe,UAAhE,GAA6E,kBAA7E,GAAkGH,cAAhH;AACD,KATD,MASO,IAAIG,cAAcrD,cAAcK,WAAhC,EAA6C;AAClD;AACAD,cAAQJ,cAAcK,WAAd,CAA0BgD,UAA1B,CAAR;AACA,UAAI,EAAEf,gBAAgBlC,KAAlB,CAAJ,EAA8B;AAC5B;AACA,cAAM,IAAIgD,KAAJ,CAAU,8BAA8Bd,YAA9B,GAA6C,yCAAvD,CAAN;AACD;AACDY,uBAAiBI,WAAW,IAAIlD,MAAMkC,YAAN,CAAf,EAAoC5C,uBAApC,CAAjB;AACAF,YAAMc,OAAN,CAAc,4CAA4CgC,YAA5C,GAA2D,MAA3D,GAAoEe,UAApE,GAAiF,kBAAjF,GAAsGH,cAApH;AACD,KATM,MASA;AACL;AACA,UAAIK,kBAAkBC,OAAOC,IAAP,CAAYzD,cAAcK,WAA1B,EAAuC,CAAvC,CAAtB;;AAEA,UAAI,EAAEiC,gBAAgBtC,cAAcK,WAAd,CAA0BkD,eAA1B,CAAlB,CAAJ,EAAmE;AACjE;AACA,cAAM,IAAIH,KAAJ,CAAU,8BAA8Bd,YAA9B,GAA6C,yCAAvD,CAAN;AACD;AACD,UAAIoB,+BAA+B,IAAI1D,cAAcK,WAAd,CAA0BkD,eAA1B,EAA2CjB,YAA3C,CAAvC;;AAEA,UAAI,EAAEe,cAAcrD,cAAcK,WAAd,CAA0BkD,eAA1B,CAAhB,CAAJ,EAAiE;AAC/D;AACA,cAAM,IAAIH,KAAJ,CAAU,4CAA4CC,UAA5C,GAAyD,yCAAnE,CAAN;AACD;AACD,UAAIM,iCAAiC3D,cAAcK,WAAd,CAA0BkD,eAA1B,EAA2CF,UAA3C,CAArC;;AAEAH,uBAAiBI,WAAWI,+BAA+BC,8BAA1C,EAA0EjE,uBAA1E,CAAjB;AACAF,YAAMc,OAAN,CAAc,8CAA8CgC,YAA9C,GAA6D,QAA7D,GAAwEiB,eAAxE,GAA0F,MAA1F,GAAmGF,UAAnG,GAAgH,kBAAhH,GAAqIH,cAAnJ;AACD;AACF;AACD,MAAI,EAAEZ,gBAAgB1C,eAAlB,CAAJ,EAAwC;AACtCJ,UAAM2D,UAAN,CAAiB,kCAAkCD,cAAlC,GAAmD,oBAAnD,GAA0EZ,YAA3F;AACA1C,oBAAgB0C,YAAhB,IAAgCY,cAAhC;AACD;AACD,SAAOA,cAAP;AACD;;AAED,SAASI,UAAT,CAAoBM,GAApB,EAAyBC,GAAzB,EAA8B;AAC5B,MAAIC,IAAI,CAAR;AACA,OAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,GAApB,EAAyBE,GAAzB,EAA8B;AAC5BD,SAAK,GAAL;AACD;AACD,SAAOE,KAAKC,KAAL,CAAWL,MAAME,CAAjB,IAAsBA,CAA7B;AACD,C","file":"currency.js","sourcesContent":["import bidfactory from 'src/bidfactory';\nimport { STATUS } from 'src/constants';\nimport { ajax } from 'src/ajax';\nimport * as utils from 'src/utils';\nimport bidmanager from 'src/bidmanager';\nimport { config } from 'src/config';\n\nconst DEFAULT_CURRENCY_RATE_URL = 'http://currency.prebid.org/latest.json';\nconst CURRENCY_RATE_PRECISION = 4;\n\nvar bidResponseQueue = [];\nvar conversionCache = {};\nvar currencyRatesLoaded = false;\nvar adServerCurrency = 'USD';\n\nexport var currencySupportEnabled = false;\nexport var currencyRates = {};\nvar bidderCurrencyDefault = {};\n\n/**\n * Configuration function for currency\n * @param  {string} [config.adServerCurrency = 'USD']\n *  ISO 4217 3-letter currency code that represents the target currency. (e.g. 'EUR').  If this value is present,\n *  the currency conversion feature is activated.\n * @param  {number} [config.granularityMultiplier = 1]\n *  A decimal value representing how mcuh to scale the price granularity calculations.\n * @param  {object} config.bidderCurrencyDefault\n *  An optional argument to specify bid currencies for bid adapters.  This option is provided for the transitional phase\n *  before every bid adapter will specify its own bid currency.  If the adapter specifies a bid currency, this value is\n *  ignored for that bidder.\n *\n *  example:\n *  {\n *    rubicon: 'USD'\n *  }\n * @param  {string} [config.conversionRateFile = 'http://currency.prebid.org/latest.json']\n *  Optional path to a file containing currency conversion data.  Prebid.org hosts a file that is used as the default,\n *  if not specified.\n * @param  {object} [config.rates]\n *  This optional argument allows you to specify the rates with a JSON object, subverting the need for a external\n *  config.conversionRateFile parameter.  If this argument is specified, the conversion rate file will not be loaded.\n *\n *  example:\n *  {\n *    'GBP': { 'CNY': 8.8282, 'JPY': 141.7, 'USD': 1.2824 },\n *    'USD': { 'CNY': 6.8842, 'GBP': 0.7798, 'JPY': 110.49 }\n *  }\n */\nexport function setConfig(config) {\n  let url = DEFAULT_CURRENCY_RATE_URL;\n\n  if (typeof config.rates === 'object') {\n    currencyRates.conversions = config.rates;\n    currencyRatesLoaded = true;\n  }\n\n  if (typeof config.adServerCurrency === 'string') {\n    utils.logInfo('enabling currency support', arguments);\n\n    adServerCurrency = config.adServerCurrency;\n    if (config.conversionRateFile) {\n      utils.logInfo('currency using override conversionRateFile:', config.conversionRateFile);\n      url = config.conversionRateFile;\n    }\n    initCurrency(url);\n  } else {\n    // currency support is disabled, setting defaults\n    utils.logInfo('disabling currency support');\n    resetCurrency();\n  }\n  if (typeof config.bidderCurrencyDefault === 'object') {\n    bidderCurrencyDefault = config.bidderCurrencyDefault;\n  }\n}\nconfig.getConfig('currency', config => setConfig(config.currency));\n\nfunction initCurrency(url) {\n  conversionCache = {};\n  currencySupportEnabled = true;\n\n  utils.logInfo('Installing addBidResponse decorator for currency module', arguments);\n\n  bidmanager.addBidResponse.addHook(addBidResponseHook, 100);\n\n  if (!currencyRates.conversions) {\n    ajax(url, function (response) {\n      try {\n        currencyRates = JSON.parse(response);\n        utils.logInfo('currencyRates set to ' + JSON.stringify(currencyRates));\n        currencyRatesLoaded = true;\n        processBidResponseQueue();\n      } catch (e) {\n        utils.logError('failed to parse currencyRates response: ' + response);\n      }\n    });\n  }\n}\n\nfunction resetCurrency() {\n  utils.logInfo('Uninstalling addBidResponse decorator for currency module', arguments);\n\n  bidmanager.addBidResponse.removeHook(addBidResponseHook);\n\n  adServerCurrency = 'USD';\n  conversionCache = {};\n  currencySupportEnabled = false;\n  currencyRatesLoaded = false;\n  currencyRates = {};\n  bidderCurrencyDefault = {};\n}\n\nexport function addBidResponseHook(adUnitCode, bid, fn) {\n  if (!bid) {\n    return fn.apply(this, arguments); // if no bid, call original and let it display warnings\n  }\n\n  let bidder = bid.bidderCode || bid.bidder;\n  if (bidderCurrencyDefault[bidder]) {\n    let currencyDefault = bidderCurrencyDefault[bidder];\n    if (bid.currency && currencyDefault !== bid.currency) {\n      utils.logWarn(`Currency default '${bidder}: ${currencyDefault}' ignored. adapter specified '${bid.currency}'`);\n    } else {\n      bid.currency = currencyDefault;\n    }\n  }\n\n  // default to USD if currency not set\n  if (!bid.currency) {\n    utils.logWarn('Currency not specified on bid.  Defaulted to \"USD\"');\n    bid.currency = 'USD';\n  }\n\n  // execute immediately if the bid is already in the desired currency\n  if (bid.currency === adServerCurrency) {\n    return fn.apply(this, arguments);\n  }\n\n  bidResponseQueue.push(wrapFunction(fn, this, arguments));\n  if (!currencySupportEnabled || currencyRatesLoaded) {\n    processBidResponseQueue();\n  }\n}\n\nfunction processBidResponseQueue() {\n  while (bidResponseQueue.length > 0) {\n    (bidResponseQueue.shift())();\n  }\n}\n\nfunction wrapFunction(fn, context, params) {\n  return function() {\n    var bid = params[1];\n    if (bid !== undefined && 'currency' in bid && 'cpm' in bid) {\n      var fromCurrency = bid.currency;\n      try {\n        var conversion = getCurrencyConversion(fromCurrency);\n        bid.originalCpm = bid.cpm;\n        bid.originalCurrency = bid.currency;\n        if (conversion !== 1) {\n          bid.cpm = (parseFloat(bid.cpm) * conversion).toFixed(4);\n          bid.currency = adServerCurrency;\n        }\n      } catch (e) {\n        utils.logWarn('Returning NO_BID, getCurrencyConversion threw error: ', e);\n        params[1] = bidfactory.createBid(STATUS.NO_BID, {\n          bidder: bid.bidderCode || bid.bidder,\n          bidId: bid.adId\n        });\n      }\n    }\n    return fn.apply(context, params);\n  };\n}\n\nfunction getCurrencyConversion(fromCurrency) {\n  var conversionRate = null;\n  var rates;\n\n  if (fromCurrency in conversionCache) {\n    conversionRate = conversionCache[fromCurrency];\n    utils.logMessage('Using conversionCache value ' + conversionRate + ' for fromCurrency ' + fromCurrency);\n  } else if (currencySupportEnabled === false) {\n    if (fromCurrency === 'USD') {\n      conversionRate = 1;\n    } else {\n      throw new Error('Prebid currency support has not been enabled and fromCurrency is not USD');\n    }\n  } else if (fromCurrency === adServerCurrency) {\n    conversionRate = 1;\n  } else {\n    var toCurrency = adServerCurrency;\n\n    if (fromCurrency in currencyRates.conversions) {\n      // using direct conversion rate from fromCurrency to toCurrency\n      rates = currencyRates.conversions[fromCurrency];\n      if (!(toCurrency in rates)) {\n        // bid should fail, currency is not supported\n        throw new Error('Specified adServerCurrency in config \\'' + toCurrency + '\\' not found in the currency rates file');\n      }\n      conversionRate = rates[toCurrency];\n      utils.logInfo('getCurrencyConversion using direct ' + fromCurrency + ' to ' + toCurrency + ' conversionRate ' + conversionRate);\n    } else if (toCurrency in currencyRates.conversions) {\n      // using reciprocal of conversion rate from toCurrency to fromCurrency\n      rates = currencyRates.conversions[toCurrency];\n      if (!(fromCurrency in rates)) {\n        // bid should fail, currency is not supported\n        throw new Error('Specified fromCurrency \\'' + fromCurrency + '\\' not found in the currency rates file');\n      }\n      conversionRate = roundFloat(1 / rates[fromCurrency], CURRENCY_RATE_PRECISION);\n      utils.logInfo('getCurrencyConversion using reciprocal ' + fromCurrency + ' to ' + toCurrency + ' conversionRate ' + conversionRate);\n    } else {\n      // first defined currency base used as intermediary\n      var anyBaseCurrency = Object.keys(currencyRates.conversions)[0];\n\n      if (!(fromCurrency in currencyRates.conversions[anyBaseCurrency])) {\n        // bid should fail, currency is not supported\n        throw new Error('Specified fromCurrency \\'' + fromCurrency + '\\' not found in the currency rates file');\n      }\n      var toIntermediateConversionRate = 1 / currencyRates.conversions[anyBaseCurrency][fromCurrency];\n\n      if (!(toCurrency in currencyRates.conversions[anyBaseCurrency])) {\n        // bid should fail, currency is not supported\n        throw new Error('Specified adServerCurrency in config \\'' + toCurrency + '\\' not found in the currency rates file');\n      }\n      var fromIntermediateConversionRate = currencyRates.conversions[anyBaseCurrency][toCurrency];\n\n      conversionRate = roundFloat(toIntermediateConversionRate * fromIntermediateConversionRate, CURRENCY_RATE_PRECISION);\n      utils.logInfo('getCurrencyConversion using intermediate ' + fromCurrency + ' thru ' + anyBaseCurrency + ' to ' + toCurrency + ' conversionRate ' + conversionRate);\n    }\n  }\n  if (!(fromCurrency in conversionCache)) {\n    utils.logMessage('Adding conversionCache value ' + conversionRate + ' for fromCurrency ' + fromCurrency);\n    conversionCache[fromCurrency] = conversionRate;\n  }\n  return conversionRate;\n}\n\nfunction roundFloat(num, dec) {\n  var d = 1;\n  for (let i = 0; i < dec; i++) {\n    d += '0';\n  }\n  return Math.round(num * d) / d;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./modules/currency.js"],"sourceRoot":""}