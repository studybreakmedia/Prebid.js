{"version":3,"sources":["webpack:///./modules/adxcgBidAdapter.js"],"names":["utils","url","BIDDER_CODE","SUPPORTED_AD_TYPES","SOURCE","spec","code","supportedMediaTypes","isBidRequestValid","bid","params","adzoneid","buildRequests","validBidRequests","bidderRequest","logMessage","JSON","stringify","adZoneIds","prebidBidIds","sizes","forEach","push","getBidIdParameter","bidId","parseSizesInput","join","location","getTopWindowLocation","secure","protocol","requestUrl","parse","href","search","hash","adxcgRequestUrl","format","hostname","pathname","renderformat","ver","encodeURIComponent","source","pbjs","method","interpretResponse","serverResponse","bidRequests","bids","body","requestId","serverResponseOneItem","cpm","creativeId","parseInt","currency","netRevenue","ttl","deal_id","trim","length","dealId","ad","vastUrl","mediaType","nativeResponse","clickUrl","link","impressionTrackers","imptrackers","assets","asset","title","text","img","image","data","label","value","sponsoredBy","width","height","getUserSyncs","syncOptions","iframeEnabled","type"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;IAAYA,K;;AACZ;;IAAYC,G;;AACZ;;AACA;;;;AAEA;;;;;AAKA,IAAMC,cAAc,OAApB;AACA,IAAMC,qBAAqB,uCAA3B;AACA,IAAMC,SAAS,QAAf;AACO,IAAMC,sBAAO;AAClBC,QAAMJ,WADY;AAElBK,uBAAqBJ,kBAFH;;AAIlB;;;;;;AAMAK,qBAAmB,2BAAUC,GAAV,EAAe;AAChC,WAAO,CAAC,CAAEA,IAAIC,MAAJ,CAAWC,QAArB;AACD,GAZiB;;AAclB;;;;;;AAMAC,iBAAe,uBAAUC,gBAAV,EAA4BC,aAA5B,EAA2C;AACxDd,UAAMe,UAAN,qBAAmCC,KAAKC,SAAL,CAAeJ,gBAAf,CAAnC;;AAEA,QAAIK,YAAY,EAAhB;AACA,QAAIC,eAAe,EAAnB;AACA,QAAIC,QAAQ,EAAZ;;AAEAP,qBAAiBQ,OAAjB,CAAyB,eAAO;AAC9BH,gBAAUI,IAAV,CAAetB,MAAMuB,iBAAN,CAAwB,UAAxB,EAAoCd,IAAIC,MAAxC,CAAf;AACAS,mBAAaG,IAAb,CAAkBb,IAAIe,KAAtB;AACAJ,YAAME,IAAN,CAAWtB,MAAMyB,eAAN,CAAsBhB,IAAIW,KAA1B,EAAiCM,IAAjC,CAAsC,GAAtC,CAAX;AACD,KAJD;;AAMA,QAAIC,WAAW3B,MAAM4B,oBAAN,EAAf;AACA,QAAIC,SAASF,SAASG,QAAT,KAAsB,QAAnC;;AAEA,QAAIC,aAAa9B,IAAI+B,KAAJ,CAAUL,SAASM,IAAnB,CAAjB;AACAF,eAAWG,MAAX,GAAoB,IAApB;AACAH,eAAWI,IAAX,GAAkB,IAAlB;;AAEA,QAAIC,kBAAkBnC,IAAIoC,MAAJ,CAAW;AAC/BP,gBAAUD,SAAS,OAAT,GAAmB,MADE;AAE/BS,gBAAUT,SAAS,gBAAT,GAA4B,eAFP;AAG/BU,gBAAU,UAHqB;AAI/BL,cAAQ;AACNM,sBAAc,YADR;AAENC,aAAK,eAFC;AAGN9B,kBAAUO,UAAUQ,IAAV,CAAe,GAAf,CAHJ;AAINW,gBAAQjB,MAAMM,IAAN,CAAW,GAAX,CAJF;AAKNP,sBAAcA,aAAaO,IAAb,CAAkB,GAAlB,CALR;AAMNzB,aAAKyC,mBAAmBzC,IAAIoC,MAAJ,CAAWN,UAAX,CAAnB,CANC;AAONF,gBAAQA,SAAS,GAAT,GAAe,GAPjB;AAQNc,gBAAQvC,MARF;AASNwC,cAAM;AATA;AAJuB,KAAX,CAAtB;;AAiBA,WAAO;AACLC,cAAQ,KADH;AAEL5C,WAAKmC;AAFA,KAAP;AAID,GA7DiB;AA8DlB;;;;;;AAMAU,qBAAmB,2BAAUC,cAAV,EAA0BC,WAA1B,EAAuC;AACxD,QAAIC,OAAO,EAAX;;AAEAF,qBAAiBA,eAAeG,IAAhC;AACA,QAAIH,cAAJ,EAAoB;AAClBA,qBAAe1B,OAAf,CAAuB,iCAAyB;AAC9C,YAAIZ,MAAM,EAAV;;AAEAA,YAAI0C,SAAJ,GAAgBC,sBAAsB5B,KAAtC;AACAf,YAAI4C,GAAJ,GAAUD,sBAAsBC,GAAhC;AACA5C,YAAI6C,UAAJ,GAAiBC,SAASH,sBAAsBE,UAA/B,CAAjB;AACA7C,YAAI+C,QAAJ,GAAeJ,sBAAsBI,QAAtB,GAAiCJ,sBAAsBI,QAAvD,GAAkE,KAAjF;AACA/C,YAAIgD,UAAJ,GAAiBL,sBAAsBK,UAAtB,GAAmCL,sBAAsBK,UAAzD,GAAsE,IAAvF;AACAhD,YAAIiD,GAAJ,GAAUN,sBAAsBM,GAAtB,GAA4BN,sBAAsBM,GAAlD,GAAwD,GAAlE;;AAEA,YAAIN,sBAAsBO,OAAtB,IAAiC,IAAjC,IAAyCP,sBAAsBO,OAAtB,CAA8BC,IAA9B,GAAqCC,MAArC,GAA8C,CAA3F,EAA8F;AAC5FpD,cAAIqD,MAAJ,GAAaV,sBAAsBO,OAAnC;AACD;;AAED,YAAIP,sBAAsBW,EAA1B,EAA8B;AAC5BtD,cAAIsD,EAAJ,GAASX,sBAAsBW,EAA/B;AACD,SAFD,MAEO,IAAIX,sBAAsBY,OAA1B,EAAmC;AACxCvD,cAAIuD,OAAJ,GAAcZ,sBAAsBY,OAApC;AACAvD,cAAIwD,SAAJ,GAAgB,OAAhB;AACD,SAHM,MAGA,IAAIb,sBAAsBc,cAA1B,EAA0C;AAC/CzD,cAAIwD,SAAJ,GAAgB,QAAhB;;AAEA,cAAIC,iBAAiBd,sBAAsBc,cAA3C;;AAEAzD,cAAI,QAAJ,IAAgB;AACd0D,sBAAUzB,mBAAmBwB,eAAeE,IAAf,CAAoBnE,GAAvC,CADI;AAEdoE,gCAAoBH,eAAeI;AAFrB,WAAhB;;AAKAJ,yBAAeK,MAAf,CAAsBlD,OAAtB,CAA8B,iBAAS;AACrC,gBAAImD,MAAMC,KAAN,IAAeD,MAAMC,KAAN,CAAYC,IAA/B,EAAqC;AACnCjE,kBAAI,QAAJ,EAAcgE,KAAd,GAAsBD,MAAMC,KAAN,CAAYC,IAAlC;AACD;;AAED,gBAAIF,MAAMG,GAAN,IAAaH,MAAMG,GAAN,CAAU1E,GAA3B,EAAgC;AAC9BQ,kBAAI,QAAJ,EAAcmE,KAAd,GAAsBJ,MAAMG,GAAN,CAAU1E,GAAhC;AACD;;AAED,gBAAIuE,MAAMK,IAAN,IAAcL,MAAMK,IAAN,CAAWC,KAAX,KAAqB,MAAnC,IAA6CN,MAAMK,IAAN,CAAWE,KAA5D,EAAmE;AACjEtE,kBAAI,QAAJ,EAAcyC,IAAd,GAAqBsB,MAAMK,IAAN,CAAWE,KAAhC;AACD;;AAED,gBAAIP,MAAMK,IAAN,IAAcL,MAAMK,IAAN,CAAWC,KAAX,KAAqB,WAAnC,IAAkDN,MAAMK,IAAN,CAAWE,KAAjE,EAAwE;AACtEtE,kBAAI,QAAJ,EAAcuE,WAAd,GAA4BR,MAAMK,IAAN,CAAWE,KAAvC;AACD;AACF,WAhBD;AAiBD;;AAEDtE,YAAIwE,KAAJ,GAAY7B,sBAAsB6B,KAAlC;AACAxE,YAAIyE,MAAJ,GAAa9B,sBAAsB8B,MAAnC;AACAlF,cAAMe,UAAN,qBAAmCqC,sBAAsB5B,KAAzD,WAAoER,KAAKC,SAAL,CAAeR,GAAf,CAApE;AACAwC,aAAK3B,IAAL,CAAUb,GAAV;AACD,OApDD;AAqDD,KAtDD,MAsDO;AACLT,YAAMe,UAAN;AACD;AACD,WAAOkC,IAAP;AACD,GAlIiB;AAmIlBkC,gBAAc,sBAAUC,WAAV,EAAuB;AACnC,QAAIA,YAAYC,aAAhB,EAA+B;AAC7B,aAAO,CAAC;AACNC,cAAM,QADA;AAENrF,aAAK;AAFC,OAAD,CAAP;AAID;AACF;AA1IiB,CAAb;AA4IP,mCAAeI,IAAf,E","file":"adxcgBidAdapter.js","sourcesContent":["import * as utils from 'src/utils';\nimport * as url from 'src/url';\nimport {registerBidder} from 'src/adapters/bidderFactory';\nimport {NATIVE, VIDEO} from 'src/mediaTypes';\n\n/**\n * Adapter for requesting bids from adxcg.net\n * updated to latest prebid repo on 2017.10.20\n */\n\nconst BIDDER_CODE = 'adxcg';\nconst SUPPORTED_AD_TYPES = [VIDEO, NATIVE];\nconst SOURCE = 'pbjs10';\nexport const spec = {\n  code: BIDDER_CODE,\n  supportedMediaTypes: SUPPORTED_AD_TYPES,\n\n  /**\n   * Determines whether or not the given bid request is valid.\n   *\n   * @param {object} bid The bid params to validate.\n   * @return boolean True if this is a valid bid, and false otherwise.\n   */\n  isBidRequestValid: function (bid) {\n    return !!(bid.params.adzoneid);\n  },\n\n  /**\n   * Make a server request from the list of BidRequests.\n   *\n   * an array of validBidRequests\n   * Info describing the request to the server.\n   */\n  buildRequests: function (validBidRequests, bidderRequest) {\n    utils.logMessage(`buildRequests: ${JSON.stringify(validBidRequests)}`);\n\n    let adZoneIds = [];\n    let prebidBidIds = [];\n    let sizes = [];\n\n    validBidRequests.forEach(bid => {\n      adZoneIds.push(utils.getBidIdParameter('adzoneid', bid.params));\n      prebidBidIds.push(bid.bidId);\n      sizes.push(utils.parseSizesInput(bid.sizes).join('|'));\n    });\n\n    let location = utils.getTopWindowLocation();\n    let secure = location.protocol === 'https:';\n\n    let requestUrl = url.parse(location.href);\n    requestUrl.search = null;\n    requestUrl.hash = null;\n\n    let adxcgRequestUrl = url.format({\n      protocol: secure ? 'https' : 'http',\n      hostname: secure ? 'hbps.adxcg.net' : 'hbp.adxcg.net',\n      pathname: '/get/adi',\n      search: {\n        renderformat: 'javascript',\n        ver: 'r20171102PB10',\n        adzoneid: adZoneIds.join(','),\n        format: sizes.join(','),\n        prebidBidIds: prebidBidIds.join(','),\n        url: encodeURIComponent(url.format(requestUrl)),\n        secure: secure ? '1' : '0',\n        source: SOURCE,\n        pbjs: '0.34.1'\n      }\n    });\n\n    return {\n      method: 'GET',\n      url: adxcgRequestUrl,\n    };\n  },\n  /**\n   * Unpack the response from the server into a list of bids.\n   *\n   * @param {*} serverResponse A successful response from the server.\n   * @return {bidRequests[]} An array of bids which were nested inside the server.\n   */\n  interpretResponse: function (serverResponse, bidRequests) {\n    let bids = [];\n\n    serverResponse = serverResponse.body;\n    if (serverResponse) {\n      serverResponse.forEach(serverResponseOneItem => {\n        let bid = {};\n\n        bid.requestId = serverResponseOneItem.bidId;\n        bid.cpm = serverResponseOneItem.cpm;\n        bid.creativeId = parseInt(serverResponseOneItem.creativeId);\n        bid.currency = serverResponseOneItem.currency ? serverResponseOneItem.currency : 'USD';\n        bid.netRevenue = serverResponseOneItem.netRevenue ? serverResponseOneItem.netRevenue : true;\n        bid.ttl = serverResponseOneItem.ttl ? serverResponseOneItem.ttl : 300;\n\n        if (serverResponseOneItem.deal_id != null && serverResponseOneItem.deal_id.trim().length > 0) {\n          bid.dealId = serverResponseOneItem.deal_id;\n        }\n\n        if (serverResponseOneItem.ad) {\n          bid.ad = serverResponseOneItem.ad;\n        } else if (serverResponseOneItem.vastUrl) {\n          bid.vastUrl = serverResponseOneItem.vastUrl;\n          bid.mediaType = 'video';\n        } else if (serverResponseOneItem.nativeResponse) {\n          bid.mediaType = 'native';\n\n          let nativeResponse = serverResponseOneItem.nativeResponse;\n\n          bid['native'] = {\n            clickUrl: encodeURIComponent(nativeResponse.link.url),\n            impressionTrackers: nativeResponse.imptrackers\n          };\n\n          nativeResponse.assets.forEach(asset => {\n            if (asset.title && asset.title.text) {\n              bid['native'].title = asset.title.text;\n            }\n\n            if (asset.img && asset.img.url) {\n              bid['native'].image = asset.img.url;\n            }\n\n            if (asset.data && asset.data.label === 'DESC' && asset.data.value) {\n              bid['native'].body = asset.data.value;\n            }\n\n            if (asset.data && asset.data.label === 'SPONSORED' && asset.data.value) {\n              bid['native'].sponsoredBy = asset.data.value;\n            }\n          });\n        }\n\n        bid.width = serverResponseOneItem.width;\n        bid.height = serverResponseOneItem.height;\n        utils.logMessage(`submitting bid[${serverResponseOneItem.bidId}]: ${JSON.stringify(bid)}`);\n        bids.push(bid);\n      });\n    } else {\n      utils.logMessage(`empty bid response`);\n    }\n    return bids;\n  },\n  getUserSyncs: function (syncOptions) {\n    if (syncOptions.iframeEnabled) {\n      return [{\n        type: 'iframe',\n        url: '//cdn.adxcg.net/pb-sync.html'\n      }];\n    }\n  }\n};\nregisterBidder(spec);\n\n\n\n// WEBPACK FOOTER //\n// ./modules/adxcgBidAdapter.js"],"sourceRoot":""}