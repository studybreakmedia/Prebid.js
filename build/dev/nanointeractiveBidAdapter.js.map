{"version":3,"sources":["webpack:///./modules/nanointeractiveBidAdapter.js"],"names":["utils","BIDDER_CODE","ENGINE_BASE_URL","SECURITY","DATA_PARTNER_ID","DATA_PARTNER_PIXEL_ID","ALG","NQ","NQ_NAME","CATEGORY","DEFAULT_ALG","spec","code","supportedMediaTypes","isBidRequestValid","bid","sec","params","dpid","pid","buildRequests","bidRequests","payload","forEach","push","createSingleBidRequest","method","url","data","JSON","stringify","interpretResponse","serverResponse","bids","isEngineResponseValid","serverBid","createSingleBidResponse","createNqParam","createCategoryParam","sizes","map","value","bidId","location","origin","requestId","id","cpm","width","height","ad","ttl","creativeId","netRevenue","currency","getParameterByName","response"],"mappings":"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","file":"nanointeractiveBidAdapter.js","sourcesContent":["import * as utils from 'src/utils';\nimport { registerBidder } from '../src/adapters/bidderFactory';\nimport { BANNER } from '../src/mediaTypes';\n\nexport const BIDDER_CODE = 'nanointeractive';\nexport const ENGINE_BASE_URL = 'http://tmp.audiencemanager.de/hb';\n\nexport const SECURITY = 'sec';\nexport const DATA_PARTNER_ID = 'dpid';\nexport const DATA_PARTNER_PIXEL_ID = 'pid';\nexport const ALG = 'alg';\nexport const NQ = 'nq';\nexport const NQ_NAME = 'name';\nexport const CATEGORY = 'category';\n\nconst DEFAULT_ALG = 'ihr';\n\nexport const spec = {\n\n  code: BIDDER_CODE,\n  supportedMediaTypes: [BANNER],\n\n  isBidRequestValid(bid) {\n    const sec = bid.params[SECURITY];\n    const dpid = bid.params[DATA_PARTNER_ID];\n    const pid = bid.params[DATA_PARTNER_PIXEL_ID];\n    return !!(sec && dpid && pid);\n  },\n  buildRequests(bidRequests) {\n    let payload = [];\n    bidRequests.forEach(bid => payload.push(createSingleBidRequest(bid)));\n    return {\n      method: 'POST',\n      url: ENGINE_BASE_URL,\n      data: JSON.stringify(payload)\n    };\n  },\n  interpretResponse(serverResponse) {\n    const bids = [];\n    serverResponse.forEach(serverBid => {\n      if (isEngineResponseValid(serverBid)) {\n        bids.push(createSingleBidResponse(serverBid));\n      }\n    });\n    return bids;\n  }\n};\n\nfunction createSingleBidRequest(bid) {\n  return {\n    [SECURITY]: bid.params[SECURITY],\n    [DATA_PARTNER_ID]: bid.params[DATA_PARTNER_ID],\n    [DATA_PARTNER_PIXEL_ID]: bid.params[DATA_PARTNER_PIXEL_ID],\n    [ALG]: bid.params[ALG] || DEFAULT_ALG,\n    [NQ]: [createNqParam(bid), createCategoryParam(bid)],\n    sizes: bid.sizes.map(value => value[0] + 'x' + value[1]),\n    bidId: bid.bidId,\n    cors: location.origin\n  };\n}\n\nfunction createSingleBidResponse(serverBid) {\n  return {\n    requestId: serverBid.id,\n    cpm: serverBid.cpm,\n    width: serverBid.width,\n    height: serverBid.height,\n    ad: serverBid.ad,\n    ttl: serverBid.ttl,\n    creativeId: serverBid.creativeId,\n    netRevenue: serverBid.netRevenue || true,\n    currency: serverBid.currency,\n  };\n}\n\nfunction createNqParam(bid) {\n  return bid.params[NQ_NAME] ? utils.getParameterByName(bid.params[NQ_NAME]) : bid.params[NQ] || null;\n}\n\nfunction createCategoryParam(bid) {\n  return bid.params[CATEGORY] || null;\n}\n\nfunction isEngineResponseValid(response) {\n  return !!response.cpm && !!response.ad;\n}\n\nregisterBidder(spec);\n\n\n\n// WEBPACK FOOTER //\n// ./modules/nanointeractiveBidAdapter.js"],"sourceRoot":""}