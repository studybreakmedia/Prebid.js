{"version":3,"sources":["webpack:///./modules/springserveBidAdapter.js"],"names":["bidfactory","require","bidmanager","adloader","adaptermanager","SpringServeAdapter","buildSpringServeCall","bid","spCall","window","location","protocol","size","sizes","width","height","params","requestAttrMap","sp","imp_id","property","hasOwnProperty","domain","hostname","test","_callBids","bids","i","length","loadScript","pbjs","handleSpringServeCB","responseObj","seatbid","undefined","responseBid","requestBids","_bidsRequested","find","bidSet","bidderCode","filter","impId","impid","createBid","placementCode","bidRequest","bidder","cpm","price","ad","adm","addBidResponse","callBids","registerBidAdapter","module","exports"],"mappings":"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","file":"springserveBidAdapter.js","sourcesContent":["var bidfactory = require('src/bidfactory.js');\nvar bidmanager = require('src/bidmanager.js');\nvar adloader = require('src/adloader');\nvar adaptermanager = require('src/adaptermanager');\n\nvar SpringServeAdapter;\nSpringServeAdapter = function SpringServeAdapter() {\n  function buildSpringServeCall(bid) {\n    var spCall = window.location.protocol + '//bidder.springserve.com/display/hbid?';\n\n    // get width and height from bid attribute\n    var size = bid.sizes[0];\n    var width = size[0];\n    var height = size[1];\n\n    spCall += '&w=';\n    spCall += width;\n    spCall += '&h=';\n    spCall += height;\n\n    var params = bid.params;\n\n    // maps param attributes to request parameters\n    var requestAttrMap = {\n      sp: 'supplyPartnerId',\n      imp_id: 'impId'\n    };\n\n    for (var property in requestAttrMap) {\n      if (requestAttrMap.hasOwnProperty && params.hasOwnProperty(requestAttrMap[property])) {\n        spCall += '&';\n        spCall += property;\n        spCall += '=';\n\n        // get property from params and include it in request\n        spCall += params[requestAttrMap[property]];\n      }\n    }\n\n    var domain = window.location.hostname;\n\n    // override domain when testing\n    if (params.hasOwnProperty('test') && params.test === true) {\n      spCall += '&debug=true';\n      domain = 'test.com';\n    }\n\n    spCall += '&domain=';\n    spCall += domain;\n    spCall += '&callback=pbjs.handleSpringServeCB';\n\n    return spCall;\n  }\n\n  function _callBids(params) {\n    var bids = params.bids || [];\n    for (var i = 0; i < bids.length; i++) {\n      var bid = bids[i];\n      // bidmanager.pbCallbackMap[bid.params.impId] = params;\n      adloader.loadScript(buildSpringServeCall(bid));\n    }\n  }\n\n  pbjs.handleSpringServeCB = function (responseObj) {\n    if (responseObj && responseObj.seatbid && responseObj.seatbid.length > 0 &&\n      responseObj.seatbid[0].bid[0] !== undefined) {\n      // look up the request attributs stored in the bidmanager\n      var responseBid = responseObj.seatbid[0].bid[0];\n      // var requestObj = bidmanager.getPlacementIdByCBIdentifer(responseBid.impid);\n      var requestBids = pbjs._bidsRequested.find(bidSet => bidSet.bidderCode === 'springserve');\n      if (requestBids && requestBids.bids.length > 0) {\n        requestBids = requestBids.bids.filter(bid => bid.params && bid.params.impId === responseBid.impid);\n      } else {\n        requestBids = [];\n      }\n      var bid = bidfactory.createBid(1);\n      var placementCode;\n\n      // assign properties from the original request to the bid object\n      for (var i = 0; i < requestBids.length; i++) {\n        var bidRequest = requestBids[i];\n        if (bidRequest.bidder === 'springserve') {\n          placementCode = bidRequest.placementCode;\n          var size = bidRequest.sizes[0];\n          bid.width = size[0];\n          bid.height = size[1];\n        }\n      }\n\n      if (requestBids[0]) { bid.bidderCode = requestBids[0].bidder; }\n\n      if (responseBid.hasOwnProperty('price') && responseBid.hasOwnProperty('adm')) {\n        // assign properties from the response to the bid object\n        bid.cpm = responseBid.price;\n        bid.ad = responseBid.adm;\n      } else {\n        // make object for invalid bid response\n        bid = bidfactory.createBid(2);\n        bid.bidderCode = 'springserve';\n      }\n\n      bidmanager.addBidResponse(placementCode, bid);\n    }\n  };\n\n  // Export the callBids function, so that prebid.js can execute this function\n  // when the page asks to send out bid requests.\n  return {\n    callBids: _callBids,\n    buildSpringServeCall: buildSpringServeCall\n  };\n};\n\nadaptermanager.registerBidAdapter(new SpringServeAdapter(), 'springserve');\n\nmodule.exports = SpringServeAdapter;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/springserveBidAdapter.js"],"sourceRoot":""}