{"version":3,"sources":["webpack:///./modules/sovrnBidAdapter.js"],"names":["utils","spec","code","supportedMediaTypes","isBidRequestValid","bid","params","tagid","isNaN","parseFloat","isFinite","buildRequests","bidReqs","sovrnImps","_each","push","id","bidId","banner","w","h","getBidIdParameter","bidfloor","configOptions","getConfig","sovrnBidReq","getUniqueIdentifierStr","imp","site","domain","publisherHost","window","location","host","page","publisherPage","pathname","search","hash","method","url","data","JSON","stringify","options","contentType","interpretResponse","request","body","seatbid","sovrnBidResponses","responseIds","length","map","sovrnBid","impid","requestId","cpm","price","width","parseInt","height","creativeId","dealId","currency","netRevenue","mediaType","ad","decodeURIComponent","adm","nurl","ttl","bidRequestObj","parse","forEach","bidRequest","indexOf","e"],"mappings":"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","file":"sovrnBidAdapter.js","sourcesContent":["import * as utils from 'src/utils';\nimport { registerBidder } from 'src/adapters/bidderFactory';\nimport { BANNER } from 'src/mediaTypes';\nimport { REPO_AND_VERSION } from 'src/constants';\nimport { config } from 'src/config';\n\nexport const spec = {\n  code: 'sovrn',\n  supportedMediaTypes: [BANNER],\n\n  /**\n   * Check if the bid is a valid zone ID in either number or string form\n   * @param {object} bid the Sovrn bid to validate\n   * @return boolean for whether or not a bid is valid\n   */\n  isBidRequestValid: function(bid) {\n    return !!(bid.params.tagid && !isNaN(parseFloat(bid.params.tagid)) && isFinite(bid.params.tagid));\n  },\n\n  /**\n   * Format the bid request object for our endpoint\n   * @param {BidRequest[]} bidRequests Array of Sovrn bidders\n   * @return object of parameters for Prebid AJAX request\n   */\n  buildRequests: function(bidReqs) {\n    let sovrnImps = [];\n    utils._each(bidReqs, function (bid) {\n      sovrnImps.push({\n        id: bid.bidId,\n        banner: { w: 1, h: 1 },\n        tagid: utils.getBidIdParameter('tagid', bid.params),\n        bidfloor: utils.getBidIdParameter('bidfloor', bid.params)\n      });\n    });\n    const configOptions = config.getConfig();\n    const sovrnBidReq = {\n      id: utils.getUniqueIdentifierStr(),\n      imp: sovrnImps,\n      site: {\n        domain: configOptions.publisherHost || window.location.host,\n        page: configOptions.publisherPage || window.location.pathname + location.search + location.hash\n      }\n    };\n    return {\n      method: 'POST',\n      url: `//ap.lijit.com/rtb/bid?src=${REPO_AND_VERSION}`,\n      data: JSON.stringify(sovrnBidReq),\n      options: {contentType: 'text/plain'}\n    };\n  },\n\n  /**\n   * Format Sovrn responses as Prebid bid responses\n   * @param {id, seatbid} sovrnResponse A successful response from Sovrn.\n   * @return {Bid[]} An array of formatted bids.\n  */\n  interpretResponse: function({ body: {id, seatbid} }, request) {\n    let sovrnBidResponses = [];\n    const responseIds = []\n    if (id &&\n      seatbid &&\n      seatbid.length > 0 &&\n      seatbid[0].bid &&\n      seatbid[0].bid.length > 0) {\n      seatbid[0].bid.map(sovrnBid => {\n        responseIds.push(sovrnBid.impid);\n        sovrnBidResponses.push({\n          requestId: sovrnBid.impid,\n          cpm: parseFloat(sovrnBid.price),\n          width: parseInt(sovrnBid.w),\n          height: parseInt(sovrnBid.h),\n          creativeId: sovrnBid.id,\n          dealId: sovrnBid.dealId || null,\n          currency: 'USD',\n          netRevenue: true,\n          mediaType: BANNER,\n          ad: decodeURIComponent(`${sovrnBid.adm}<img src=\"${sovrnBid.nurl}\">`),\n          ttl: 60000\n        });\n      });\n    }\n    // Generate a zero cent bid for all of the bid requests that did not have responses.\n    // This will ensure that Prebid does not wait for bids that will never come back.\n    try {\n      const bidRequestObj = JSON.parse(request.data);\n      bidRequestObj.imp.forEach((bidRequest) => {\n        if (responseIds.indexOf(bidRequest.id) === -1) {\n          sovrnBidResponses.push({\n            requestId: bidRequest.id,\n            cpm: 0,\n            width: 1,\n            height: 1,\n            creativeId: null,\n            dealId: null,\n            currency: 'USD',\n            netRevenue: true,\n            mediaType: BANNER,\n            ttl: 60000,\n            ad: null\n          });\n        }\n      });\n    } catch (e) {\n\n    }\n    return sovrnBidResponses;\n  }\n};\n\nregisterBidder(spec);\n\n\n\n// WEBPACK FOOTER //\n// ./modules/sovrnBidAdapter.js"],"sourceRoot":""}