{"version":3,"sources":["webpack:///./modules/xhbBidAdapter.js"],"names":["utils","XhbAdapter","baseAdapter","usersync","_defaultBidderSettings","alwaysUseBid","adserverTargeting","key","val","bidResponse","dealId","adId","width","height","registerDefaultBidderSetting","callBids","params","anArr","bids","i","length","bidRequest","callbackId","bidId","buildJPTCall","bid","placementId","getBidIdParameter","member","inventoryCode","referrer","altReferrer","jptCall","tryAppendQueryString","sizeQueryString","parsedSizes","parseSizesInput","sizes","parsedSizesLength","j","charAt","slice","getTopWindowUrl","lastIndexOf","substring","pbjs","handleXhbCB","jptResponseObj","bidCode","callback_uid","responseCPM","id","placementCode","bidObj","getBidRequest","bidder","status","GOOD","result","ad","creative_id","createBid","bidderCode","cpm","adUrl","addBidResponse","NO_BID","iframe","createInvisibleIframe","src","document","body","appendChild","error","logError","setBidderCode","registerBidAdapter","module","exports"],"mappings":"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","file":"xhbBidAdapter.js","sourcesContent":["import Adapter from 'src/adapter';\nimport bidfactory from 'src/bidfactory';\nimport bidmanager from 'src/bidmanager';\nimport * as utils from 'src/utils';\nimport { STATUS } from 'src/constants';\nimport adaptermanager from 'src/adaptermanager';\nimport { loadScript } from 'src/adloader';\n\nconst XhbAdapter = function XhbAdapter() {\n  const baseAdapter = new Adapter('xhb');\n  let usersync = false;\n\n  const _defaultBidderSettings = {\n    alwaysUseBid: true,\n    adserverTargeting: [\n      {\n        key: 'hb_xhb_deal',\n        val: function (bidResponse) {\n          return bidResponse.dealId;\n        }\n      },\n      {\n        key: 'hb_xhb_adid',\n        val: function (bidResponse) {\n          return bidResponse.adId;\n        }\n      },\n      {\n        key: 'hb_xhb_size',\n        val: function (bidResponse) {\n          return bidResponse.width + 'x' + bidResponse.height;\n        }\n      }\n    ]\n  };\n  bidmanager.registerDefaultBidderSetting('xhb', _defaultBidderSettings);\n\n  baseAdapter.callBids = function (params) {\n    const anArr = params.bids;\n    for (let i = 0; i < anArr.length; i++) {\n      let bidRequest = anArr[i];\n      let callbackId = bidRequest.bidId;\n      loadScript(buildJPTCall(bidRequest, callbackId));\n    }\n  };\n\n  function buildJPTCall(bid, callbackId) {\n    // determine tag params\n    const placementId = utils.getBidIdParameter('placementId', bid.params);\n    const member = utils.getBidIdParameter('member', bid.params);\n    const inventoryCode = utils.getBidIdParameter('invCode', bid.params);\n    let referrer = utils.getBidIdParameter('referrer', bid.params);\n    const altReferrer = utils.getBidIdParameter('alt_referrer', bid.params);\n\n    // Build tag, always use https\n    let jptCall = 'https://ib.adnxs.com/jpt?';\n\n    jptCall = utils.tryAppendQueryString(jptCall, 'callback', 'pbjs.handleXhbCB');\n    jptCall = utils.tryAppendQueryString(jptCall, 'callback_uid', callbackId);\n    jptCall = utils.tryAppendQueryString(jptCall, 'id', placementId);\n    jptCall = utils.tryAppendQueryString(jptCall, 'psa', '0');\n    jptCall = utils.tryAppendQueryString(jptCall, 'member', member);\n    jptCall = utils.tryAppendQueryString(jptCall, 'code', inventoryCode);\n    jptCall = utils.tryAppendQueryString(jptCall, 'traffic_source_code', (utils.getBidIdParameter('trafficSourceCode', bid.params)));\n\n    // sizes takes a bit more logic\n    let sizeQueryString = '';\n    let parsedSizes = utils.parseSizesInput(bid.sizes);\n\n    // combine string into proper querystring for impbus\n    let parsedSizesLength = parsedSizes.length;\n    if (parsedSizesLength > 0) {\n      // first value should be \"size\"\n      sizeQueryString = 'size=' + parsedSizes[0];\n      if (parsedSizesLength > 1) {\n        // any subsequent values should be \"promo_sizes\"\n        sizeQueryString += '&promo_sizes=';\n        for (let j = 1; j < parsedSizesLength; j++) {\n          sizeQueryString += parsedSizes[j] += ',';\n        }\n        // remove trailing comma\n        if (sizeQueryString && sizeQueryString.charAt(sizeQueryString.length - 1) === ',') {\n          sizeQueryString = sizeQueryString.slice(0, sizeQueryString.length - 1);\n        }\n      }\n    }\n\n    if (sizeQueryString) {\n      jptCall += sizeQueryString + '&';\n    }\n\n    // append referrer\n    if (referrer === '') {\n      referrer = utils.getTopWindowUrl();\n    }\n\n    jptCall = utils.tryAppendQueryString(jptCall, 'referrer', referrer);\n    jptCall = utils.tryAppendQueryString(jptCall, 'alt_referrer', altReferrer);\n\n    // remove the trailing \"&\"\n    if (jptCall.lastIndexOf('&') === jptCall.length - 1) {\n      jptCall = jptCall.substring(0, jptCall.length - 1);\n    }\n\n    return jptCall;\n  }\n\n  // expose the callback to the global object:\n  pbjs.handleXhbCB = function (jptResponseObj) {\n    let bidCode;\n\n    if (jptResponseObj && jptResponseObj.callback_uid) {\n      let responseCPM;\n      const id = jptResponseObj.callback_uid;\n      let placementCode = '';\n      const bidObj = utils.getBidRequest(id);\n      if (bidObj) {\n        bidCode = bidObj.bidder;\n        placementCode = bidObj.placementCode;\n\n        // set the status\n        bidObj.status = STATUS.GOOD;\n      }\n\n      let bid = [];\n      if (jptResponseObj.result && jptResponseObj.result.ad && jptResponseObj.result.ad !== '') {\n        responseCPM = 0.00;\n\n        // store bid response\n        // bid status is good (indicating 1)\n        let adId = jptResponseObj.result.creative_id;\n        bid = bidfactory.createBid(STATUS.GOOD, bidObj);\n        bid.creative_id = adId;\n        bid.bidderCode = bidCode;\n        bid.cpm = responseCPM;\n        bid.adUrl = jptResponseObj.result.ad;\n        bid.width = jptResponseObj.result.width;\n        bid.height = jptResponseObj.result.height;\n        bid.dealId = '99999999';\n\n        bidmanager.addBidResponse(placementCode, bid);\n      } else {\n        // no response data\n        // indicate that there is no bid for this placement\n        bid = bidfactory.createBid(STATUS.NO_BID, bidObj);\n        bid.bidderCode = bidCode;\n        bidmanager.addBidResponse(placementCode, bid);\n      }\n\n      if (!usersync) {\n        let iframe = utils.createInvisibleIframe();\n        iframe.src = '//acdn.adnxs.com/ib/static/usersync/v3/async_usersync.html';\n        try {\n          document.body.appendChild(iframe);\n        } catch (error) {\n          utils.logError(error);\n        }\n        usersync = true;\n      }\n    }\n  };\n\n  return Object.assign(this, {\n    callBids: baseAdapter.callBids,\n    setBidderCode: baseAdapter.setBidderCode,\n    buildJPTCall: buildJPTCall\n  });\n};\n\nadaptermanager.registerBidAdapter(new XhbAdapter(), 'xhb');\n\nmodule.exports = XhbAdapter;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/xhbBidAdapter.js"],"sourceRoot":""}