{"version":3,"sources":["webpack:///./modules/yieldbotBidAdapter.js"],"names":["adloader","require","bidfactory","bidmanager","utils","adaptermanager","YieldbotAdapter","window","ybotq","ybotlib","BID_STATUS","PENDING","AVAILABLE","EMPTY","pageLevelOption","buildCreative","slot","size","buildBid","slotCriteria","bid","ybot_ad","createBid","cpm","parseInt","ybot_cpm","szArr","ybot_size","split","ybot_slot","sizeStr","width","height","ad","k","bidderCode","getUniqueSlotSizes","sizes","newSizes","hasSize","isArray","idx","length","bidSize","isStr","nSize","push","callBids","params","bids","yieldbot","parsedBidSizes","psn","slots","_each","v","slotName","parsedSizes","parseSizesInput","concat","bidId","bidSlots","hasOwnProperty","_initialized","pub","defineSlot","enableAsync","go","isEmpty","nextPageview","handleUpdateState","loadScript","slotUsed","bidRequest","placementCode","criteria","getSlotCriteria","requestedSizes","slotSizeOk","requestedSize","addBidResponse","registerBidAdapter","module","exports"],"mappings":"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","file":"yieldbotBidAdapter.js","sourcesContent":["/**\n * @overview Yieldbot sponsored Prebid.js adapter.\n * @author elljoh\n */\nvar adloader = require('src/adloader');\nvar bidfactory = require('src/bidfactory');\nvar bidmanager = require('src/bidmanager');\nvar utils = require('src/utils');\nvar adaptermanager = require('src/adaptermanager');\n\n/**\n * Adapter for requesting bids from Yieldbot.\n *\n * @returns {Object} Object containing implementation for invocation in {@link module:adaptermanger.callBids}\n * @class\n */\nfunction YieldbotAdapter() {\n  window.ybotq = window.ybotq || [];\n\n  var ybotlib = {\n    BID_STATUS: {\n      PENDING: 0,\n      AVAILABLE: 1,\n      EMPTY: 2\n    },\n    pageLevelOption: false,\n    /**\n     * Builds the Yieldbot creative tag.\n     *\n     * @param {String} slot - The slot name to bid for\n     * @param {String} size - The dimenstions of the slot\n     * @private\n     */\n    buildCreative: function (slot, size) {\n      return '<script type=\"text/javascript\" src=\"//cdn.yldbt.com/js/yieldbot.intent.js\"></script>' +\n        '<script type=\"text/javascript\">var ybotq = ybotq || [];' +\n        'ybotq.push(function () {yieldbot.renderAd(\\'' + slot + ':' + size + '\\');});</script>';\n    },\n    /**\n     * Bid response builder.\n     *\n     * @param {Object} slotCriteria  - Yieldbot bid criteria\n     * @private\n     */\n    buildBid: function (slotCriteria) {\n      var bid = {};\n\n      if (slotCriteria && slotCriteria.ybot_ad && slotCriteria.ybot_ad !== 'n') {\n        bid = bidfactory.createBid(ybotlib.BID_STATUS.AVAILABLE);\n\n        bid.cpm = parseInt(slotCriteria.ybot_cpm) / 100.0 || 0; // Yieldbot CPM bids are in cents\n\n        var szArr = slotCriteria.ybot_size ? slotCriteria.ybot_size.split('x') : [0, 0];\n        var slot = slotCriteria.ybot_slot || '';\n        var sizeStr = slotCriteria.ybot_size || ''; // Creative template needs the dimensions string\n\n        bid.width = szArr[0] || 0;\n        bid.height = szArr[1] || 0;\n\n        bid.ad = ybotlib.buildCreative(slot, sizeStr);\n\n        // Add Yieldbot parameters to allow publisher bidderSettings.yieldbot specific targeting\n        for (var k in slotCriteria) {\n          bid[k] = slotCriteria[k];\n        }\n      } else {\n        bid = bidfactory.createBid(ybotlib.BID_STATUS.EMPTY);\n      }\n\n      bid.bidderCode = 'yieldbot';\n      return bid;\n    },\n    /**\n     * Unique'ify slot sizes for a Yieldbot bid request<br>\n     * Bids may refer to a slot and dimension multiple times on a page, but should exist once in the request.\n     * @param {Array} sizes An array of sizes to deduplicate\n     * @private\n     */\n    getUniqueSlotSizes: function(sizes) {\n      var newSizes = [];\n      var hasSize = {};\n      if (utils.isArray(sizes)) {\n        for (var idx = 0; idx < sizes.length; idx++) {\n          var bidSize = sizes[idx] || '';\n          if (bidSize && utils.isStr(bidSize) && !hasSize[bidSize]) {\n            var nSize = bidSize.split('x');\n            if (nSize.length > 1) {\n              newSizes.push([nSize[0], nSize[1]]);\n            }\n            hasSize[bidSize] = true;\n          }\n        }\n      }\n      return newSizes;\n    },\n    /**\n     * Yieldbot implementation of {@link module:adaptermanger.callBids}\n     * @param {Object} params - Adapter bid configuration object\n     * @private\n     */\n    callBids: function (params) {\n      var bids = params.bids || [];\n      var ybotq = window.ybotq || [];\n\n      ybotlib.pageLevelOption = false;\n\n      ybotq.push(function () {\n        var yieldbot = window.yieldbot;\n        // Empty defined slot bids object\n        ybotlib.bids = {};\n        ybotlib.parsedBidSizes = {};\n        // Iterate through bids to obtain Yieldbot slot config\n        // - Slot config can be different between initial and refresh requests\n        var psn = 'ERROR_PREBID_DEFINE_YB_PSN';\n        var slots = {};\n        utils._each(bids, function (v) {\n          var bid = v;\n          // bidder params config: http://prebid.org/dev-docs/bidders/yieldbot.html\n          // - last psn wins\n          psn = bid.params && bid.params.psn ? bid.params.psn : psn;\n          var slotName = bid.params && bid.params.slot ? bid.params.slot : 'ERROR_PREBID_DEFINE_YB_SLOT';\n          var parsedSizes = utils.parseSizesInput(bid.sizes) || [];\n          slots[slotName] = slots[slotName] || [];\n          slots[slotName] = slots[slotName].concat(parsedSizes);\n          ybotlib.bids[bid.bidId] = bid;\n          ybotlib.parsedBidSizes[bid.bidId] = parsedSizes;\n        });\n\n        for (var bidSlots in slots) {\n          if (slots.hasOwnProperty(bidSlots)) {\n            // The same slot name and size may be used for multiple bids. Get unique sizes\n            // for the request.\n            slots[bidSlots] = ybotlib.getUniqueSlotSizes(slots[bidSlots]);\n          }\n        }\n\n        if (yieldbot._initialized !== true) {\n          yieldbot.pub(psn);\n          for (var slotName in slots) {\n            if (slots.hasOwnProperty(slotName)) {\n              yieldbot.defineSlot(slotName, { sizes: slots[slotName] });\n            }\n          }\n          yieldbot.enableAsync();\n          yieldbot.go();\n        } else if (!utils.isEmpty(slots)) {\n          yieldbot.nextPageview(slots);\n        }\n      });\n\n      ybotq.push(function () {\n        ybotlib.handleUpdateState();\n      });\n      adloader.loadScript('//cdn.yldbt.com/js/yieldbot.intent.js', null, true);\n    },\n    /**\n     * Yieldbot bid request callback handler.\n     *\n     * @see {@link YieldbotAdapter~_callBids}\n     * @private\n     */\n    handleUpdateState: function () {\n      var yieldbot = window.yieldbot;\n      var slotUsed = {};\n\n      for (var bidId in ybotlib.bids) {\n        if (ybotlib.bids.hasOwnProperty(bidId)) {\n          var bidRequest = ybotlib.bids[bidId] || null;\n\n          if (bidRequest && bidRequest.params && bidRequest.params.slot) {\n            var placementCode = bidRequest.placementCode || 'ERROR_YB_NO_PLACEMENT';\n            var criteria = yieldbot.getSlotCriteria(bidRequest.params.slot);\n            var requestedSizes = ybotlib.parsedBidSizes[bidId] || [];\n\n            var slotSizeOk = false;\n            for (var idx = 0; idx < requestedSizes.length; idx++) {\n              var requestedSize = requestedSizes[idx];\n\n              if (!slotUsed[criteria.ybot_slot] && requestedSize === criteria.ybot_size) {\n                slotSizeOk = true;\n                slotUsed[criteria.ybot_slot] = true;\n                break;\n              }\n            }\n            var bid = ybotlib.buildBid(slotSizeOk ? criteria : { ybot_ad: 'n' });\n            bidmanager.addBidResponse(placementCode, bid);\n          }\n        }\n      }\n    }\n  };\n  return {\n    callBids: ybotlib.callBids,\n    getUniqueSlotSizes: ybotlib.getUniqueSlotSizes\n  };\n}\n\nadaptermanager.registerBidAdapter(new YieldbotAdapter(), 'yieldbot');\n\nmodule.exports = YieldbotAdapter;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/yieldbotBidAdapter.js"],"sourceRoot":""}