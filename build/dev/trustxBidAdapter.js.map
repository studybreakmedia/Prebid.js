{"version":3,"sources":["webpack:///./modules/trustxBidAdapter.js"],"names":["utils","BIDDER_CODE","ENDPOINT_URL","TIME_TO_LIVE","ADAPTER_SYNC_URL","LOG_ERROR_MESS","noAuid","noAdm","noBid","noPlacementCode","emptyUids","emptySeatbid","emptyResponse","hasEmptySeatbidArray","hasNoArrayOfBids","spec","code","isBidRequestValid","bid","params","uid","buildRequests","validBidRequests","auids","bidsMap","bids","priceType","forEach","push","payload","u","getTopWindowUrl","pt","join","method","url","data","interpretResponse","serverResponse","bidRequest","body","bidResponses","errorMessage","seatbid","length","_addBidResponse","_getBidFromResponse","respItem","logError","getUserSyncs","syncOptions","pixelEnabled","type","JSON","stringify","serverBid","auid","adm","awaitingBids","bidResponse","requestId","bidId","bidderCode","cpm","price","width","w","height","h","creativeId","currency","netRevenue","ttl","ad","dealId","dealid"],"mappings":"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","file":"trustxBidAdapter.js","sourcesContent":["import * as utils from 'src/utils';\nimport {registerBidder} from 'src/adapters/bidderFactory';\nconst BIDDER_CODE = 'trustx';\nconst ENDPOINT_URL = '//sofia.trustx.org/hb';\nconst TIME_TO_LIVE = 360;\nconst ADAPTER_SYNC_URL = '//sofia.trustx.org/push_sync';\nconst LOG_ERROR_MESS = {\n  noAuid: 'Bid from response has no auid parameter - ',\n  noAdm: 'Bid from response has no adm parameter - ',\n  noBid: 'Array of bid objects is empty',\n  noPlacementCode: 'Can\\'t find in requested bids the bid with auid - ',\n  emptyUids: 'Uids should be not empty',\n  emptySeatbid: 'Seatbid array from response has empty item',\n  emptyResponse: 'Response is empty',\n  hasEmptySeatbidArray: 'Response has empty seatbid array',\n  hasNoArrayOfBids: 'Seatbid from response has no array of bid objects - '\n};\nexport const spec = {\n  code: BIDDER_CODE,\n  /**\n   * Determines whether or not the given bid request is valid.\n   *\n   * @param {BidRequest} bid The bid params to validate.\n   * @return boolean True if this is a valid bid, and false otherwise.\n   */\n  isBidRequestValid: function(bid) {\n    return !!bid.params.uid;\n  },\n  /**\n   * Make a server request from the list of BidRequests.\n   *\n   * @param {BidRequest[]} validBidRequests - an array of bids\n   * @return ServerRequest Info describing the request to the server.\n   */\n  buildRequests: function(validBidRequests) {\n    const auids = [];\n    const bidsMap = {};\n    const bids = validBidRequests || [];\n    let priceType = 'net';\n\n    bids.forEach(bid => {\n      if (bid.params.priceType === 'gross') {\n        priceType = 'gross';\n      }\n      if (!bidsMap[bid.params.uid]) {\n        bidsMap[bid.params.uid] = [bid];\n        auids.push(bid.params.uid);\n      } else {\n        bidsMap[bid.params.uid].push(bid);\n      }\n    });\n\n    const payload = {\n      u: utils.getTopWindowUrl(),\n      pt: priceType,\n      auids: auids.join(','),\n    };\n\n    return {\n      method: 'GET',\n      url: ENDPOINT_URL,\n      data: payload,\n      bidsMap: bidsMap,\n    };\n  },\n  /**\n   * Unpack the response from the server into a list of bids.\n   *\n   * @param {*} serverResponse A successful response from the server.\n   * @param {*} bidRequest\n   * @return {Bid[]} An array of bids which were nested inside the server.\n   */\n  interpretResponse: function(serverResponse, bidRequest) {\n    serverResponse = serverResponse && serverResponse.body\n    const bidResponses = [];\n    const bidsMap = bidRequest.bidsMap;\n    const priceType = bidRequest.data.pt;\n\n    let errorMessage;\n\n    if (!serverResponse) errorMessage = LOG_ERROR_MESS.emptyResponse;\n    else if (serverResponse.seatbid && !serverResponse.seatbid.length) {\n      errorMessage = LOG_ERROR_MESS.hasEmptySeatbidArray;\n    }\n\n    if (!errorMessage && serverResponse.seatbid) {\n      serverResponse.seatbid.forEach(respItem => {\n        _addBidResponse(_getBidFromResponse(respItem), bidsMap, priceType, bidResponses);\n      });\n    }\n    if (errorMessage) utils.logError(errorMessage);\n    return bidResponses;\n  },\n  getUserSyncs: function(syncOptions) {\n    if (syncOptions.pixelEnabled) {\n      return [{\n        type: 'image',\n        url: ADAPTER_SYNC_URL\n      }];\n    }\n  }\n}\n\nfunction _getBidFromResponse(respItem) {\n  if (!respItem) {\n    utils.logError(LOG_ERROR_MESS.emptySeatbid);\n  } else if (!respItem.bid) {\n    utils.logError(LOG_ERROR_MESS.hasNoArrayOfBids + JSON.stringify(respItem));\n  } else if (!respItem.bid[0]) {\n    utils.logError(LOG_ERROR_MESS.noBid);\n  }\n  return respItem && respItem.bid && respItem.bid[0];\n}\n\nfunction _addBidResponse(serverBid, bidsMap, priceType, bidResponses) {\n  if (!serverBid) return;\n  let errorMessage;\n  if (!serverBid.auid) errorMessage = LOG_ERROR_MESS.noAuid + JSON.stringify(serverBid);\n  if (!serverBid.adm) errorMessage = LOG_ERROR_MESS.noAdm + JSON.stringify(serverBid);\n  else {\n    const awaitingBids = bidsMap[serverBid.auid];\n    if (awaitingBids) {\n      awaitingBids.forEach(bid => {\n        const bidResponse = {\n          requestId: bid.bidId, // bid.bidderRequestId,\n          bidderCode: spec.code,\n          cpm: serverBid.price,\n          width: serverBid.w,\n          height: serverBid.h,\n          creativeId: serverBid.auid, // bid.bidId,\n          currency: 'USD',\n          netRevenue: priceType !== 'gross',\n          ttl: TIME_TO_LIVE,\n          ad: serverBid.adm,\n          dealId: serverBid.dealid\n        };\n        bidResponses.push(bidResponse);\n      });\n    } else {\n      errorMessage = LOG_ERROR_MESS.noPlacementCode + serverBid.auid;\n    }\n  }\n  if (errorMessage) {\n    utils.logError(errorMessage);\n  }\n}\n\nregisterBidder(spec);\n\n\n\n// WEBPACK FOOTER //\n// ./modules/trustxBidAdapter.js"],"sourceRoot":""}