{"version":3,"sources":["webpack:///./modules/prebidServerBidAdapter.js","webpack:///./src/cookie.js"],"names":["utils","getConfig","TYPE","SRC","cookieSetUrl","_synced","tryConvertType","typeToConvert","value","toString","Number","tryConvertString","bind","tryConvertNumber","paramTypes","_cookiesQueued","PrebidServer","baseAdapter","config","setConfig","s2sconfig","convertTypes","adUnits","forEach","adUnit","bids","types","bid","bidder","Object","keys","params","key","converted","logMessage","isNaN","kwArray","kvObj","Array","isArray","map","val","push","keywords","callBids","bidRequest","isDebug","deepClone","ad_units","videoMediaType","deepAccess","video","mediaTypes","media_types","requestJson","account_id","accountId","tid","max_bids","maxBids","timeout_millis","timeout","secure","url","getTopWindowUrl","prebid_version","filter","hasSizes","is_debug","requestedBidders","uniques","reduce","flatten","processResponse","response","handleResponse","payload","JSON","stringify","endpoint","contentType","withCredentials","unit","sizes","length","doBidderSync","type","logError","triggerPixel","insertUserSyncIframe","result","parse","status","bidder_status","no_cookie","usersync","clientAdapter","getBidAdapter","registerSyncs","getBidRequest","bidObj","bid_id","cpm","price","GOOD","NO_BID","bidObject","createBid","source","creative_id","bidderCode","media_type","mediaType","adm","vastXml","nurl","vastUrl","ad","createTrackPixelHtml","decodeURIComponent","adUrl","width","height","adserverTargeting","ad_server_targeting","deal_id","dealId","addBidResponse","code","receivedBidIds","getBidderRequestAllAdUnits","includes","bidId","adUnitCode","placementCode","cookieSet","error","queueSync","bidderCodes","uuid","generateUUID","bidders","syncEndpoint","e","setBidderCode","registerBidAdapter","module","exports","cookie","isSafariBrowser","loadScript"],"mappings":"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","file":"prebidServerBidAdapter.js","sourcesContent":["import Adapter from 'src/adapter';\nimport bidfactory from 'src/bidfactory';\nimport bidmanager from 'src/bidmanager';\nimport * as utils from 'src/utils';\nimport { ajax } from 'src/ajax';\nimport { STATUS, S2S } from 'src/constants';\nimport { cookieSet } from 'src/cookie.js';\nimport adaptermanager from 'src/adaptermanager';\nimport { config } from 'src/config';\nimport { VIDEO } from 'src/mediaTypes';\n\nconst getConfig = config.getConfig;\n\nconst TYPE = S2S.SRC;\nconst cookieSetUrl = 'https://acdn.adnxs.com/cookieset/cs.js';\nlet _synced = false;\n\n/**\n * Try to convert a value to a type.\n * If it can't be done, the value will be returned.\n *\n * @param {string} typeToConvert The target type. e.g. \"string\", \"number\", etc.\n * @param {*} value The value to be converted into typeToConvert.\n */\nfunction tryConvertType(typeToConvert, value) {\n  if (typeToConvert === 'string') {\n    return value && value.toString();\n  } else if (typeToConvert === 'number') {\n    return Number(value);\n  } else {\n    return value;\n  }\n}\n\nconst tryConvertString = tryConvertType.bind(null, 'string');\nconst tryConvertNumber = tryConvertType.bind(null, 'number');\n\nconst paramTypes = {\n  'appnexus': {\n    'member': tryConvertString,\n    'invCode': tryConvertString,\n    'placementId': tryConvertNumber\n  },\n  'rubicon': {\n    'accountId': tryConvertNumber,\n    'siteId': tryConvertNumber,\n    'zoneId': tryConvertNumber\n  },\n  'indexExchange': {\n    'siteID': tryConvertNumber\n  },\n  'audienceNetwork': {\n    'placementId': tryConvertString\n  },\n  'pubmatic': {\n    'publisherId': tryConvertString,\n    'adSlot': tryConvertString\n  },\n  'districtm': {\n    'member': tryConvertString,\n    'invCode': tryConvertString,\n    'placementId': tryConvertNumber\n  },\n  'pulsepoint': {\n    'cf': tryConvertString,\n    'cp': tryConvertNumber,\n    'ct': tryConvertNumber\n  },\n  'conversant': {\n    'site_id': tryConvertString,\n    'secure': tryConvertNumber,\n    'mobile': tryConvertNumber\n  },\n};\n\nlet _cookiesQueued = false;\n\n/**\n * Bidder adapter for Prebid Server\n */\nfunction PrebidServer() {\n  let baseAdapter = new Adapter('prebidServer');\n  let config;\n\n  baseAdapter.setConfig = function(s2sconfig) {\n    config = s2sconfig;\n  };\n\n  function convertTypes(adUnits) {\n    adUnits.forEach(adUnit => {\n      adUnit.bids.forEach(bid => {\n        const types = paramTypes[bid.bidder] || [];\n        Object.keys(types).forEach(key => {\n          if (bid.params[key]) {\n            const converted = types[key](bid.params[key]);\n            if (converted !== bid.params[key]) {\n              utils.logMessage(`Mismatched type for Prebid Server : ${bid.bidder} : ${key}. Required Type:${types[key]}`);\n            }\n            bid.params[key] = converted;\n\n            // don't send invalid values\n            if (isNaN(bid.params[key])) {\n              delete bid.params.key;\n            }\n          }\n        });\n        // will collect any custom params and place them under bid.params.keywords attribute in the following manner for pbs to ingest properly\n        // \"keywords\":[{\"key\":\"randomKey\",\"value\":[\"123456789\"]},{\"key\":\"single_test\"},{\"key\":\"myMultiVar\",\"value\":[\"myValue\",\"124578\"]}]\n        let kwArray = [];\n        Object.keys(bid.params).forEach(key => {\n          if (bid.bidder === 'appnexus' && (key !== 'member' && key !== 'invCode' && key !== 'placementId')) {\n            let kvObj = {};\n            kvObj.key = key\n            if (bid.params[key] !== null) {\n              if (Array.isArray(bid.params[key])) {\n                kvObj.value = bid.params[key].map(val => tryConvertString(val));\n              } else {\n                kvObj.value = [tryConvertString(bid.params[key])];\n              }\n            }\n            kwArray.push(kvObj);\n            delete bid.params[key];\n          }\n        });\n        bid.params.keywords = kwArray;\n      });\n    });\n  }\n\n  /* Prebid executes this function when the page asks to send out bid requests */\n  baseAdapter.callBids = function(bidRequest) {\n    const isDebug = !!getConfig('debug');\n    const adUnits = utils.deepClone(bidRequest.ad_units);\n    adUnits.forEach(adUnit => {\n      let videoMediaType = utils.deepAccess(adUnit, 'mediaTypes.video');\n      if (videoMediaType) {\n        // pbs expects a ad_unit.video attribute if the imp is video\n        adUnit.video = Object.assign({}, videoMediaType);\n        delete adUnit.mediaTypes;\n        // default is assumed to be 'banner' so if there is a video type we assume video only until PBS can support multi format auction.\n        adUnit.media_types = [VIDEO];\n      }\n    })\n    convertTypes(adUnits);\n    let requestJson = {\n      account_id: config.accountId,\n      tid: bidRequest.tid,\n      max_bids: config.maxBids,\n      timeout_millis: config.timeout,\n      secure: config.secure,\n      url: utils.getTopWindowUrl(),\n      prebid_version: '0.34.1',\n      ad_units: adUnits.filter(hasSizes),\n      is_debug: isDebug\n    };\n\n    // in case config.bidders contains invalid bidders, we only process those we sent requests for.\n    const requestedBidders = requestJson.ad_units.map(adUnit => adUnit.bids.map(bid => bid.bidder).filter(utils.uniques)).reduce(utils.flatten).filter(utils.uniques);\n    function processResponse(response) {\n      handleResponse(response, requestedBidders);\n    }\n    const payload = JSON.stringify(requestJson);\n    ajax(config.endpoint, processResponse, payload, {\n      contentType: 'text/plain',\n      withCredentials: true\n    });\n  };\n\n  // at this point ad units should have a size array either directly or mapped so filter for that\n  function hasSizes(unit) {\n    return unit.sizes && unit.sizes.length;\n  }\n\n  /**\n   * Run a cookie sync for the given type, url, and bidder\n   *\n   * @param {string} type the type of sync, \"image\", \"redirect\", \"iframe\"\n   * @param {string} url the url to sync\n   * @param {string} bidder name of bidder doing sync for\n   */\n  function doBidderSync(type, url, bidder) {\n    if (!url) {\n      utils.logError(`No sync url for bidder \"${bidder}\": ${url}`);\n    } else if (type === 'image' || type === 'redirect') {\n      utils.logMessage(`Invoking image pixel user sync for bidder: \"${bidder}\"`);\n      utils.triggerPixel(url);\n    } else if (type == 'iframe') {\n      utils.logMessage(`Invoking iframe user sync for bidder: \"${bidder}\"`);\n      utils.insertUserSyncIframe(url);\n    } else {\n      utils.logError(`User sync type \"${type}\" not supported for bidder: \"${bidder}\"`);\n    }\n  }\n\n  /* Notify Prebid of bid responses so bids can get in the auction */\n  function handleResponse(response, requestedBidders) {\n    let result;\n    try {\n      result = JSON.parse(response);\n\n      if (result.status === 'OK' || result.status === 'no_cookie') {\n        if (result.bidder_status) {\n          result.bidder_status.forEach(bidder => {\n            if (bidder.no_cookie && !_cookiesQueued) {\n              doBidderSync(bidder.usersync.type, bidder.usersync.url, bidder.bidder);\n            }\n          });\n        }\n\n        // do client-side syncs if available\n        requestedBidders.forEach(bidder => {\n          let clientAdapter = adaptermanager.getBidAdapter(bidder);\n          if (clientAdapter && clientAdapter.registerSyncs) {\n            clientAdapter.registerSyncs();\n          }\n        });\n\n        if (result.bids) {\n          result.bids.forEach(bidObj => {\n            let bidRequest = utils.getBidRequest(bidObj.bid_id);\n            let cpm = bidObj.price;\n            let status;\n            if (cpm !== 0) {\n              status = STATUS.GOOD;\n            } else {\n              status = STATUS.NO_BID;\n            }\n\n            let bidObject = bidfactory.createBid(status, bidRequest);\n            bidObject.source = TYPE;\n            bidObject.creative_id = bidObj.creative_id;\n            bidObject.bidderCode = bidObj.bidder;\n            bidObject.cpm = cpm;\n            // From ORTB see section 4.2.3: adm Optional means of conveying ad markup in case the bid wins; supersedes the win notice if markup is included in both.\n            if (bidObj.media_type === VIDEO) {\n              bidObject.mediaType = VIDEO;\n              if (bidObj.adm) {\n                bidObject.vastXml = bidObj.adm;\n              }\n              if (bidObj.nurl) {\n                bidObject.vastUrl = bidObj.nurl;\n              }\n            } else {\n              if (bidObj.adm && bidObj.nurl) {\n                bidObject.ad = bidObj.adm;\n                bidObject.ad += utils.createTrackPixelHtml(decodeURIComponent(bidObj.nurl));\n              } else if (bidObj.adm) {\n                bidObject.ad = bidObj.adm;\n              } else if (bidObj.nurl) {\n                bidObject.adUrl = bidObj.nurl\n              }\n            }\n\n            bidObject.width = bidObj.width;\n            bidObject.height = bidObj.height;\n            bidObject.adserverTargeting = bidObj.ad_server_targeting;\n            if (bidObj.deal_id) {\n              bidObject.dealId = bidObj.deal_id;\n            }\n\n            bidmanager.addBidResponse(bidObj.code, bidObject);\n          });\n        }\n\n        const receivedBidIds = result.bids ? result.bids.map(bidObj => bidObj.bid_id) : [];\n\n        // issue a no-bid response for every bid request that can not be matched with received bids\n        requestedBidders.forEach(bidder => {\n          utils\n            .getBidderRequestAllAdUnits(bidder)\n            .bids.filter(bidRequest => !receivedBidIds.includes(bidRequest.bidId))\n            .forEach(bidRequest => {\n              let bidObject = bidfactory.createBid(STATUS.NO_BID, bidRequest);\n              bidObject.source = TYPE;\n              bidObject.adUnitCode = bidRequest.placementCode;\n              bidObject.bidderCode = bidRequest.bidder;\n              bidmanager.addBidResponse(bidObject.adUnitCode, bidObject);\n            });\n        });\n      }\n      if (result.status === 'no_cookie' && config.cookieSet) {\n        // cookie sync\n        cookieSet(cookieSetUrl);\n      }\n    } catch (error) {\n      utils.logError(error);\n    }\n\n    if (!result || (result.status && result.status.includes('Error'))) {\n      utils.logError('error parsing response: ', result.status);\n    }\n  }\n  /**\n   * @param  {} {bidders} list of bidders to request user syncs for.\n   */\n  baseAdapter.queueSync = function({bidderCodes}) {\n    if (_synced) {\n      return;\n    }\n    _synced = true;\n    const payload = JSON.stringify({\n      uuid: utils.generateUUID(),\n      bidders: bidderCodes\n    });\n    ajax(config.syncEndpoint, (response) => {\n      try {\n        response = JSON.parse(response);\n        response.bidder_status.forEach(bidder => doBidderSync(bidder.usersync.type, bidder.usersync.url, bidder.bidder));\n      } catch (e) {\n        utils.logError(e);\n      }\n    },\n    payload, {\n      contentType: 'text/plain',\n      withCredentials: true\n    });\n  };\n\n  return Object.assign(this, {\n    queueSync: baseAdapter.queueSync,\n    setConfig: baseAdapter.setConfig,\n    callBids: baseAdapter.callBids,\n    setBidderCode: baseAdapter.setBidderCode,\n    type: TYPE\n  });\n}\n\nadaptermanager.registerBidAdapter(new PrebidServer(), 'prebidServer');\n\nmodule.exports = PrebidServer;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/prebidServerBidAdapter.js","import * as utils from './utils';\nimport adLoader from './adloader';\n\nconst cookie = exports;\n\ncookie.cookieSet = function(cookieSetUrl) {\n  if (!utils.isSafariBrowser()) {\n    return;\n  }\n  adLoader.loadScript(cookieSetUrl, null, true);\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/cookie.js"],"sourceRoot":""}