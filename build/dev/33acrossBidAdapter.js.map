{"version":3,"sources":["webpack:///./modules/33acrossBidAdapter.js"],"names":["require","registerBidder","utils","BIDDER_CODE","END_POINT","SYNC_ENDPOINT","_createBidResponse","response","requestId","id","bidderCode","cpm","seatbid","bid","price","width","w","height","h","ad","adm","ttl","creativeId","ext","rp","advid","currency","cur","netRevenue","_createServerRequest","bidRequest","ttxRequest","params","imp","banner","format","sizes","map","_getFormatSize","ttx","prod","productId","site","siteId","bidId","options","contentType","withCredentials","customHeaders","url","JSON","stringify","_createSync","syncUrl","type","sizeArr","isBidRequestValid","bidder","buildRequests","bidRequests","interpretResponse","serverResponse","bidResponses","body","length","push","getUserSyncs","syncOptions","syncs","ttxBidRequests","getBidderRequestAllAdUnits","bids","iframeEnabled","spec","code","module","exports"],"mappings":"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","file":"33acrossBidAdapter.js","sourcesContent":["const { registerBidder } = require('../src/adapters/bidderFactory');\nconst utils = require('../src/utils');\n\nconst BIDDER_CODE = '33across';\nconst END_POINT = 'https://ssc.33across.com/api/v1/hb';\nconst SYNC_ENDPOINT = 'https://de.tynt.com/deb/v2?m=xch';\n\n// All this assumes that only one bid is ever returned by ttx\nfunction _createBidResponse(response) {\n  return {\n    requestId: response.id,\n    bidderCode: BIDDER_CODE,\n    cpm: response.seatbid[0].bid[0].price,\n    width: response.seatbid[0].bid[0].w,\n    height: response.seatbid[0].bid[0].h,\n    ad: response.seatbid[0].bid[0].adm,\n    ttl: response.seatbid[0].bid[0].ttl || 60,\n    creativeId: response.seatbid[0].bid[0].ext.rp.advid,\n    currency: response.cur,\n    netRevenue: true\n  }\n}\n\n// infer the necessary data from valid bid for a minimal ttxRequest and create HTTP request\nfunction _createServerRequest(bidRequest) {\n  const ttxRequest = {};\n  const params = bidRequest.params;\n\n  ttxRequest.imp = [];\n  ttxRequest.imp[0] = {\n    banner: {\n      format: bidRequest.sizes.map(_getFormatSize)\n    },\n    ext: {\n      ttx: {\n        prod: params.productId\n      }\n    }\n  }\n\n  // Allowing site to be a test configuration object or just the id (former required for testing,\n  // latter when used by publishers)\n  ttxRequest.site = params.site || { id: params.siteId };\n\n  // Go ahead send the bidId in request to 33exchange so it's kept track of in the bid response and\n  // therefore in ad targetting process\n  ttxRequest.id = bidRequest.bidId;\n\n  const options = {\n    contentType: 'application/json',\n    withCredentials: false\n  };\n\n  if (bidRequest.params.customHeaders) {\n    options.customHeaders = bidRequest.params.customHeaders;\n  }\n\n  return {\n    'method': 'POST',\n    'url': bidRequest.params.url || END_POINT,\n    'data': JSON.stringify(ttxRequest),\n    'options': options\n  }\n}\n\n// Sync object will always be of type iframe for ttx\nfunction _createSync(bid) {\n  const syncUrl = bid.params.syncUrl || SYNC_ENDPOINT;\n\n  return {\n    type: 'iframe',\n    url: `${syncUrl}&id=${bid.params.siteId || bid.params.site.id}`\n  }\n}\n\nfunction _getFormatSize(sizeArr) {\n  return {\n    w: sizeArr[0],\n    h: sizeArr[1],\n    ext: {}\n  }\n}\n\nfunction isBidRequestValid(bid) {\n  if (bid.bidder !== BIDDER_CODE || typeof bid.params === 'undefined') {\n    return false;\n  }\n\n  if ((typeof bid.params.site === 'undefined' || typeof bid.params.site.id === 'undefined') &&\n  (typeof bid.params.siteId === 'undefined')) {\n    return false;\n  }\n\n  if (typeof bid.params.productId === 'undefined') {\n    return false;\n  }\n\n  return true;\n}\n\n// NOTE: At this point, 33exchange only accepts request for a single impression\nfunction buildRequests(bidRequests) {\n  return bidRequests.map(_createServerRequest);\n}\n\n// NOTE: At this point, the response from 33exchange will only ever contain one bid i.e. the highest bid\nfunction interpretResponse(serverResponse) {\n  const bidResponses = [];\n\n  // If there are bids, look at the first bid of the first seatbid (see NOTE above for assumption about ttx)\n  if (serverResponse.body.seatbid.length > 0 && serverResponse.body.seatbid[0].bid.length > 0) {\n    bidResponses.push(_createBidResponse(serverResponse.body));\n  }\n\n  return bidResponses;\n}\n\n// Register one sync per bid since each ad unit may potenitally be linked to a uniqe guid\nfunction getUserSyncs(syncOptions) {\n  let syncs = [];\n  const ttxBidRequests = utils.getBidderRequestAllAdUnits(BIDDER_CODE).bids;\n\n  if (syncOptions.iframeEnabled) {\n    syncs = ttxBidRequests.map(_createSync);\n  }\n\n  return syncs;\n}\n\nconst spec = {\n  code: BIDDER_CODE,\n  isBidRequestValid,\n  buildRequests,\n  interpretResponse,\n  getUserSyncs\n}\n\nregisterBidder(spec);\n\nmodule.exports = spec;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/33acrossBidAdapter.js"],"sourceRoot":""}