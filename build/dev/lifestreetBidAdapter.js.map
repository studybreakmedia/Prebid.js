{"version":3,"sources":["webpack:///./modules/lifestreetBidAdapter.js"],"names":["bidfactory","require","bidmanager","utils","adloader","adaptermanager","LifestreetAdapter","BIDDER_CODE","ADAPTER_VERSION","SLOTS_LOAD_MAP","PREBID_REQUEST_MESSAGE","PREBID_RESPONSE_MESSAGE","_callBids","params","_each","bids","jstagUrl","bid","jstag_url","slot","adkey","adSize","ad_size","timeout","shouldRequest","length","adSizeArray","split","i","sizes","Array","size","_callJSTag","_addSlotBidResponse","loadScript","LSM_Slot","slotTagParams","_preload","_hb_request","_timeout","_onload","action","cpm","width","height","state","slotName","getSlotObjectName","pbjs","ad","_constructLSMAd","show","property","hasOwnProperty","window","addEventListener","ev","key","message","object","JSON","parse","e","source","postMessage","stringify","slotObject","destroy","hasResponse","bidObject","createBid","bidderCode","addBidResponse","placementCode","jsTagUrl","callBids","registerBidAdapter","module","exports"],"mappings":"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","file":"lifestreetBidAdapter.js","sourcesContent":["const bidfactory = require('src/bidfactory.js');\nconst bidmanager = require('src/bidmanager');\nconst utils = require('src/utils.js');\nconst adloader = require('src/adloader');\nconst adaptermanager = require('src/adaptermanager');\n\nconst LifestreetAdapter = function LifestreetAdapter() {\n  const BIDDER_CODE = 'lifestreet';\n  const ADAPTER_VERSION = 'prebidJS-1.0';\n  const SLOTS_LOAD_MAP = {};\n  const PREBID_REQUEST_MESSAGE = 'LSMPrebid Request';\n  const PREBID_RESPONSE_MESSAGE = 'LSMPrebid Response';\n\n  function _callBids(params) {\n    utils._each(params.bids, bid => {\n      const jstagUrl = bid.params.jstag_url;\n      const slot = bid.params.slot;\n      const adkey = bid.params.adkey;\n      const adSize = bid.params.ad_size;\n      let timeout = 700;\n      if (bid.params.timeout) {\n        timeout = bid.params.timeout;\n      }\n      let shouldRequest = false;\n      if (jstagUrl && jstagUrl.length > 0 && slot && slot.length > 0 &&\n          adkey && adkey.length > 0 && adSize && adSize.length > 0) {\n        let adSizeArray = adSize.split('x');\n        for (let i = 0; i < adSizeArray.length; ++i) {\n          adSizeArray[i] = +adSizeArray[i];\n        }\n        if (bid.sizes && (bid.sizes instanceof Array) && bid.sizes.length > 0 && adSizeArray.length > 1) {\n          bid.sizes = !(bid.sizes[0] instanceof Array) ? [ bid.sizes ] : bid.sizes;\n          for (let i = 0; i < bid.sizes.length; ++i) {\n            let size = bid.sizes[i];\n            if (size.length > 1) {\n              if (size[0] === adSizeArray[0] && size[1] === adSizeArray[1]) {\n                shouldRequest = true;\n                break;\n              }\n            }\n          }\n        } else {\n          shouldRequest = true;\n        }\n      }\n      if (shouldRequest) {\n        _callJSTag(bid, jstagUrl, timeout);\n      } else {\n        _addSlotBidResponse(bid, 0, null, 0, 0);\n      }\n    });\n  }\n\n  function _callJSTag(bid, jstagUrl, timeout) {\n    adloader.loadScript(jstagUrl, () => {\n      /* global LSM_Slot */\n      if (LSM_Slot && typeof LSM_Slot === 'function') {\n        let slotTagParams = {\n          _preload: 'wait',\n          _hb_request: ADAPTER_VERSION,\n          _timeout: timeout,\n          _onload: (slot, action, cpm, width, height) => {\n            if (slot.state() !== 'error') {\n              let slotName = slot.getSlotObjectName();\n              pbjs[slotName] = slot;\n              if (slotName && !SLOTS_LOAD_MAP[slotName]) {\n                SLOTS_LOAD_MAP[slotName] = true;\n                let ad = _constructLSMAd(jstagUrl, slotName);\n                _addSlotBidResponse(bid, cpm, ad, width, height);\n              } else {\n                slot.show();\n              }\n            } else {\n              _addSlotBidResponse(bid, 0, null, 0, 0);\n            }\n          }\n        };\n        for (let property in bid.params) {\n          if (property === 'jstag_url' || property === 'timeout') {\n            continue;\n          }\n          if (bid.params.hasOwnProperty(property)) {\n            slotTagParams[property] = bid.params[property];\n          }\n        }\n        LSM_Slot(slotTagParams);\n        window.addEventListener('message', (ev) => {\n          let key = ev.message ? 'message' : 'data';\n          let object = {};\n          try {\n            object = JSON.parse(ev[key]);\n          } catch (e) {\n            return;\n          }\n          if (object.message && object.message === PREBID_REQUEST_MESSAGE && object.slotName &&\n              window.pbjs[object.slotName]) {\n            ev.source.postMessage(JSON.stringify({\n              message: PREBID_RESPONSE_MESSAGE,\n              slotObject: window.pbjs[object.slotName]\n            }), '*');\n            window.pbjs[object.slotName].destroy();\n            window.pbjs[object.slotName] = null;\n          }\n        }, false);\n      } else {\n        _addSlotBidResponse(bid, 0, null, 0, 0);\n      }\n    });\n  }\n\n  function _addSlotBidResponse(bid, cpm, ad, width, height) {\n    let hasResponse = cpm && ad && ad.length > 0;\n    let bidObject = bidfactory.createBid(hasResponse ? 1 : 2, bid);\n    bidObject.bidderCode = BIDDER_CODE;\n    if (hasResponse) {\n      bidObject.cpm = cpm;\n      bidObject.ad = ad;\n      bidObject.width = width;\n      bidObject.height = height;\n    }\n    bidmanager.addBidResponse(bid.placementCode, bidObject);\n  }\n\n  function _constructLSMAd(jsTagUrl, slotName) {\n    if (jsTagUrl && slotName) {\n      return `<div id=\"LSM_AD\"></div>\n             <script type=\"text/javascript\" src='` + jsTagUrl + `'></script>\n             <script>\n              function receivedLSMMessage(ev) {\n                var key = ev.message ? 'message' : 'data';\n                var object = {};\n                try {\n                  object = JSON.parse(ev[key]);\n                } catch (e) {\n                  return;\n                }\n                if (object.message === '` + PREBID_RESPONSE_MESSAGE + `' && object.slotObject) {\n                  var slot  = object.slotObject;\n                  slot.__proto__ = slotapi.Slot.prototype;\n                  slot.getProperties()['_onload'] = function(slot) {\n                    if (slot.state() !== 'error') {\n                      slot.show();\n                    }\n                  };\n                  window[slot.getSlotObjectName()] = slot;\n                  slot.showInContainer(document.getElementById(\"LSM_AD\"));\n                }\n              }\n              window.addEventListener('message', receivedLSMMessage, false);\n              window.parent.postMessage(JSON.stringify({\n                message: '` + PREBID_REQUEST_MESSAGE + `',\n                slotName: '` + slotName + `'\n              }), '*');\n            </script>`;\n    }\n    return null;\n  }\n\n  return {\n    callBids: _callBids\n  };\n};\n\nadaptermanager.registerBidAdapter(new LifestreetAdapter(), 'lifestreet');\n\nmodule.exports = LifestreetAdapter;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/lifestreetBidAdapter.js"],"sourceRoot":""}