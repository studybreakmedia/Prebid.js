{"version":3,"sources":["webpack:///./modules/polluxBidAdapter.js"],"names":["utils","BIDDER_CODE","PLX_ENDPOINT_URL","PLX_CURRENCY","PLX_TTL","PLX_NETREVENUE","spec","code","aliases","isBidRequestValid","bid","hasOwnProperty","params","logError","buildRequests","validBidRequests","Array","isArray","length","payload","custom_url","i","request","bidId","zones","zone","sizes","bidderUrl","push","payloadString","JSON","stringify","domain","getParameterByName","tracker2","url_params","getTopWindowUrl","bidder_url","parseQueryStringParameters","logMessage","method","url","data","interpretResponse","serverResponse","bidRequest","bidResponses","body","b","bidResponse","requestId","cpm","parseFloat","width","parseInt","height","ttl","creativeId","netRevenue","currency","ad_type","adUrl","ad","referrer"],"mappings":"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","file":"polluxBidAdapter.js","sourcesContent":["import * as utils from 'src/utils';\nimport { registerBidder } from 'src/adapters/bidderFactory';\n\nconst BIDDER_CODE = 'pollux';\nconst PLX_ENDPOINT_URL = '//adn.plxnt.com/prebid/v1';\nconst PLX_CURRENCY = 'EUR';\nconst PLX_TTL = 3600;\nconst PLX_NETREVENUE = true;\n\nexport const spec = {\n  code: BIDDER_CODE,\n  aliases: ['plx'],\n  /**\n     * Determines whether or not the given bid request is valid.\n     *\n     * @param {BidRequest} bid The bid params to validate.\n     * @return boolean True if this is a valid bid, and false otherwise.\n     */\n  isBidRequestValid: function(bid) {\n    if (!bid.hasOwnProperty('params') || !bid.params.hasOwnProperty('zone')) {\n      utils.logError('required param \"zone\" is missing for == ' + BIDDER_CODE + ' ==');\n      return false;\n    }\n    return true;\n  },\n  /**\n     * Make a server request from the list of BidRequests.\n     *\n     * @param {validBidRequests[]} - an array of bids\n     * @return ServerRequest Info describing the request to the server.\n     */\n  buildRequests: function (validBidRequests) {\n    if (!Array.isArray(validBidRequests) || !validBidRequests.length) {\n      return [];\n    }\n    const payload = [];\n    let custom_url = null;\n    for (let i = 0; i < validBidRequests.length; i++) {\n      const bid = validBidRequests[i];\n      const request = {\n        bidId: bid.bidId,\n        zones: bid.params.zone,\n        sizes: bid.sizes\n      };\n      if (bid.bidderUrl && !custom_url) {\n        custom_url = bid.bidderUrl;\n      }\n      payload.push(request);\n    }\n    const payloadString = JSON.stringify(payload);\n    // build url parameters\n    const domain = utils.getParameterByName('domain');\n    const tracker2 = utils.getParameterByName('tracker2');\n    const url_params = {};\n    if (domain) {\n      url_params.domain = domain;\n    } else {\n      url_params.domain = utils.getTopWindowUrl();\n    }\n    if (tracker2) {\n      url_params.tracker2 = tracker2;\n    }\n    // build url\n    let bidder_url = custom_url || PLX_ENDPOINT_URL;\n    if (url_params) {\n      bidder_url = bidder_url + '?' + utils.parseQueryStringParameters(url_params);\n    }\n    utils.logMessage('== ' + BIDDER_CODE + ' == request built: ' + bidder_url);\n    return {\n      method: 'POST',\n      url: bidder_url,\n      data: payloadString\n    };\n  },\n  /**\n     * Unpack the response from the server into a list of bids.\n     *\n     * @param {*} serverResponse A successful response from the server.\n     * @return {Bid[]} An array of bids which were nested inside the server.\n     */\n  interpretResponse: function(serverResponse, bidRequest) {\n    let bidResponses = [];\n    if (!serverResponse || (typeof serverResponse === 'object' && !serverResponse.hasOwnProperty('body'))) {\n      utils.logMessage('No prebid response from == ' + BIDDER_CODE + ' == for bid requests:');\n      utils.logMessage(bidRequest);\n      return bidResponses;\n    }\n    serverResponse = serverResponse.body;\n    if (!Array.isArray(serverResponse) || !serverResponse.length) {\n      utils.logMessage('No prebid response from == ' + BIDDER_CODE + ' == for bid requests:');\n      utils.logMessage(bidRequest);\n      return bidResponses;\n    }\n    // loop through serverResponses\n    for (let b in serverResponse) {\n      let bid = serverResponse[b];\n      const bidResponse = {\n        requestId: bid.bidId, // not request id, it's bid's id\n        cpm: parseFloat(bid.cpm),\n        width: parseInt(bid.width),\n        height: parseInt(bid.height),\n        ttl: PLX_TTL,\n        creativeId: bid.creativeId,\n        netRevenue: PLX_NETREVENUE,\n        currency: PLX_CURRENCY\n      };\n      if (bid.ad_type === 'url') {\n        bidResponse.adUrl = bid.ad;\n      } else {\n        bidResponse.ad = bid.ad;\n      }\n      if (bid.referrer) {\n        bidResponse.referrer = bid.referrer;\n      }\n      bidResponses.push(bidResponse);\n    }\n    return bidResponses;\n  }\n};\nregisterBidder(spec);\n\n\n\n// WEBPACK FOOTER //\n// ./modules/polluxBidAdapter.js"],"sourceRoot":""}