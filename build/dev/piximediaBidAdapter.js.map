{"version":3,"sources":["webpack:///./modules/piximediaBidAdapter.js"],"names":["CONSTANTS","require","utils","bidmanager","bidfactory","adloader","Adapter","adaptermanager","PiximediaAdapter","PREBID_URL","baseAdapter","bidStash","tryAppendPixiQueryString","url","name","value","encodeURIComponent","callBids","callBidsPiximedia","params","_each","bids","bid","placementCode","sizes","siteId","placementId","hasOwnProperty","parseSizesInput","cbid","getUniqueIdentifierStr","prebidUrl","key","toString","join","String","Math","floor","random","Date","getTime","logMessage","loadScript","pbjs","handlePiximediaCallback","bidResponse","stash","bidObj","timelapsed","start","foundbypm","width","height","html","cpm","currency","createBid","STATUS","GOOD","bidderCode","bidder","ad","dealId","addBidResponse","NO_BID","setBidderCode","getBidderCode","registerBidAdapter","module","exports"],"mappings":"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","file":"piximediaBidAdapter.js","sourcesContent":["var CONSTANTS = require('src/constants.json');\nvar utils = require('src/utils.js');\nvar bidmanager = require('src/bidmanager.js');\nvar bidfactory = require('src/bidfactory.js');\nvar adloader = require('src/adloader.js');\nvar Adapter = require('src/adapter.js').default;\nvar adaptermanager = require('src/adaptermanager');\n\nvar PiximediaAdapter = function PiximediaAdapter() {\n  var PREBID_URL = '//static.adserver.pm/prebid';\n  var baseAdapter = new Adapter('piximedia');\n  var bidStash = {};\n\n  var tryAppendPixiQueryString = function(url, name, value) {\n    return url + '/' + encodeURIComponent(name) + '=' + value;\n  };\n\n  baseAdapter.callBids = function callBidsPiximedia(params) {\n    utils._each(params.bids, function(bid) {\n      // valid bids must include a siteId and an placementId\n      if (bid.placementCode && bid.sizes && bid.params && bid.params.siteId && bid.params.placementId) {\n        var sizes = bid.params.hasOwnProperty('sizes') ? bid.params.sizes : bid.sizes;\n        sizes = utils.parseSizesInput(sizes);\n\n        var cbid = utils.getUniqueIdentifierStr();\n\n        // we allow overriding the URL in the params\n        var url = bid.params.prebidUrl || PREBID_URL;\n\n        // params are passed to the Piximedia endpoint, including custom params\n        for (var key in bid.params) {\n          /* istanbul ignore else */\n          if (bid.params.hasOwnProperty(key)) {\n            var value = bid.params[key];\n            switch (key) {\n              case 'siteId':\n                url = tryAppendPixiQueryString(url, 'site_id', encodeURIComponent(value));\n                break;\n\n              case 'placementId':\n                url = tryAppendPixiQueryString(url, 'placement_id', encodeURIComponent(value));\n                break;\n\n              case 'dealId':\n                url = tryAppendPixiQueryString(url, 'l_id', encodeURIComponent(value));\n                break;\n\n              case 'sizes':\n              case 'prebidUrl':\n                break;\n\n              default:\n                if (typeof value === 'function') {\n                  url = tryAppendPixiQueryString(url, key, encodeURIComponent((value(baseAdapter, params, bid) || '').toString()));\n                } else {\n                  url = tryAppendPixiQueryString(url, key, encodeURIComponent((value || '').toString()));\n                }\n                break;\n            }\n          }\n        }\n\n        url = tryAppendPixiQueryString(url, 'jsonp', 'pbjs.handlePiximediaCallback');\n        url = tryAppendPixiQueryString(url, 'sizes', encodeURIComponent(sizes.join(',')));\n        url = tryAppendPixiQueryString(url, 'cbid', encodeURIComponent(cbid));\n        url = tryAppendPixiQueryString(url, 'rand', String(Math.floor(Math.random() * 1000000000)));\n\n        bidStash[cbid] = {\n          'bidObj': bid,\n          'url': url,\n          'start': new Date().getTime()\n        };\n        utils.logMessage('[Piximedia] Dispatching header Piximedia to URL ' + url);\n        adloader.loadScript(url);\n      }\n    });\n  };\n\n  /*\n   * Piximedia's bidResponse should look like:\n   *\n   * {\n   *   'foundbypm': true,            // a Boolean, indicating if an ad was found\n   *   'currency': 'EUR',        // the currency, as a String\n   *   'cpm': 1.99,              // the win price as a Number, in currency\n   *   'dealId': null,           // or string value of winning deal ID\n   *   'width': 300,             // width in pixels of winning ad\n   *   'height': 250,            // height in pixels of winning ad\n   *   'html': 'tag_here'        // HTML tag to load if we are picked\n   * }\n   *\n   */\n  pbjs.handlePiximediaCallback = function(bidResponse) {\n    if (bidResponse && bidResponse.hasOwnProperty('foundbypm')) {\n      var stash = bidStash[bidResponse.cbid]; // retrieve our stashed data, by using the cbid\n      var bid;\n\n      if (stash) {\n        var bidObj = stash.bidObj;\n        var timelapsed = new Date().getTime();\n        timelapsed = timelapsed - stash.start;\n\n        if (bidResponse.foundbypm && bidResponse.width && bidResponse.height && bidResponse.html && bidResponse.cpm && bidResponse.currency) {\n          /* we have a valid ad to display */\n          bid = bidfactory.createBid(CONSTANTS.STATUS.GOOD);\n          bid.bidderCode = bidObj.bidder;\n          bid.width = bidResponse.width;\n          bid.height = bidResponse.height;\n          bid.ad = bidResponse.html;\n          bid.cpm = bidResponse.cpm;\n          bid.currency = bidResponse.currency;\n\n          if (bidResponse.dealId) {\n            bid.dealId = bidResponse.dealId;\n          } else {\n            bid.dealId = null;\n          }\n\n          bidmanager.addBidResponse(bidObj.placementCode, bid);\n\n          utils.logMessage('[Piximedia] Registered bidresponse from URL ' + stash.url +\n                           ' (time: ' + String(timelapsed) + ')');\n          utils.logMessage('[Piximedia] ======> BID placementCode: ' + bidObj.placementCode +\n                           ' CPM: ' + String(bid.cpm) + ' ' + bid.currency +\n                           ' Format: ' + String(bid.width) + 'x' + String(bid.height));\n        } else {\n          /* we have no ads to display */\n          bid = bidfactory.createBid(CONSTANTS.STATUS.NO_BID);\n          bid.bidderCode = bidObj.bidder;\n          bidmanager.addBidResponse(bidObj.placementCode, bid);\n\n          utils.logMessage('[Piximedia] Registered BLANK bidresponse from URL ' + stash.url +\n                           ' (time: ' + String(timelapsed) + ')');\n          utils.logMessage('[Piximedia] ======> NOBID placementCode: ' + bidObj.placementCode);\n        }\n\n        // We should no longer need this stashed object, so drop reference:\n        bidStash[bidResponse.cbid] = null;\n      } else {\n        utils.logMessage(\"[Piximedia] Couldn't find stash for cbid=\" + bidResponse.cbid);\n      }\n    }\n  };\n\n  // return an object with PiximediaAdapter methods\n  return Object.assign(this, {\n    callBids: baseAdapter.callBids,\n    setBidderCode: baseAdapter.setBidderCode,\n    getBidderCode: baseAdapter.getBidderCode\n  });\n};\n\nadaptermanager.registerBidAdapter(new PiximediaAdapter(), 'piximedia');\n\nmodule.exports = PiximediaAdapter;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/piximediaBidAdapter.js"],"sourceRoot":""}