{"version":3,"sources":["webpack:///./modules/serverbidBidAdapter.js"],"names":["utils","BIDDER_CODE","CONFIG","spec","code","aliases","isBidRequestValid","bid","params","networkId","siteId","buildRequests","validBidRequests","ret","method","url","data","bidRequest","length","ENDPOINT_URL","placements","time","Date","now","user","getTopWindowUrl","referrer","document","enableBotFiltering","includePricingData","parallel","map","config","bidder","BASE_URI","placement","divName","bidId","adTypes","getSize","sizes","push","JSON","stringify","interpretResponse","serverResponse","bids","bidObj","bidResponses","body","i","decision","decisions","price","pricing","clearPrice","requestId","cpm","width","height","ad","retrieveAd","currency","creativeId","adId","ttl","netRevenue","getUserSyncs","syncOptions","sizeMap","result","forEach","size","index","indexOf","contents","createTrackPixelHtml","impressionUrl"],"mappings":"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","file":"serverbidBidAdapter.js","sourcesContent":["import * as utils from 'src/utils';\nimport { registerBidder } from 'src/adapters/bidderFactory';\n\nconst BIDDER_CODE = 'serverbid';\n\nconst CONFIG = {\n  'serverbid': {\n    'BASE_URI': 'https://e.serverbid.com/api/v2'\n  },\n  'connectad': {\n    'BASE_URI': 'https://i.connectad.io/api/v2'\n  },\n  'onefiftytwo': {\n    'BASE_URI': 'https://e.serverbid.com/api/v2'\n  },\n  'insticator': {\n    'BASE_URI': 'https://e.serverbid.com/api/v2'\n  }\n};\n\nexport const spec = {\n  code: BIDDER_CODE,\n  aliases: ['connectad', 'onefiftytwo', 'insticator', 'adsparc'],\n\n  /**\n   * Determines whether or not the given bid request is valid.\n   *\n   * @param {BidRequest} bid The bid params to validate.\n   * @return boolean True if this is a valid bid, and false otherwise.\n   */\n  isBidRequestValid: function(bid) {\n    return !!(bid.params.networkId && bid.params.siteId);\n  },\n\n  /**\n   * Make a server request from the list of BidRequests.\n   *\n   * @param {validBidRequests[]} - an array of bids\n   * @return ServerRequest Info describing the request to the server.\n   */\n\n  buildRequests: function(validBidRequests) {\n    // Do we need to group by bidder? i.e. to make multiple requests for\n    // different endpoints.\n\n    let ret = {\n      method: 'POST',\n      url: '',\n      data: '',\n      bidRequest: []\n    };\n\n    if (validBidRequests.length < 1) {\n      return ret;\n    }\n\n    let ENDPOINT_URL;\n\n    const data = Object.assign({\n      placements: [],\n      time: Date.now(),\n      user: {},\n      url: utils.getTopWindowUrl(),\n      referrer: document.referrer,\n      enableBotFiltering: true,\n      includePricingData: true,\n      parallel: true\n    }, validBidRequests[0].params);\n\n    validBidRequests.map(bid => {\n      let config = CONFIG[bid.bidder];\n      ENDPOINT_URL = config.BASE_URI;\n\n      const placement = Object.assign({\n        divName: bid.bidId,\n        adTypes: bid.adTypes || getSize(bid.sizes)\n      }, bid.params);\n\n      if (placement.networkId && placement.siteId) {\n        data.placements.push(placement);\n      }\n    });\n\n    ret.data = JSON.stringify(data);\n    ret.bidRequest = validBidRequests;\n    ret.url = ENDPOINT_URL;\n\n    return ret;\n  },\n\n  /**\n   * Unpack the response from the server into a list of bids.\n   *\n   * @param {*} serverResponse A successful response from the server.\n   * @return {Bid[]} An array of bids which were nested inside the server.\n   */\n  interpretResponse: function(serverResponse, bidRequest) {\n    let bid;\n    let bids;\n    let bidId;\n    let bidObj;\n    let bidResponses = [];\n\n    bids = bidRequest.bidRequest;\n\n    serverResponse = (serverResponse || {}).body;\n    for (let i = 0; i < bids.length; i++) {\n      bid = {};\n      bidObj = bids[i];\n      bidId = bidObj.bidId;\n\n      if (serverResponse) {\n        const decision = serverResponse.decisions && serverResponse.decisions[bidId];\n        const price = decision && decision.pricing && decision.pricing.clearPrice;\n\n        if (decision && price) {\n          bid.requestId = bidId;\n          bid.cpm = price;\n          bid.width = decision.width;\n          bid.height = decision.height;\n          bid.ad = retrieveAd(decision);\n          bid.currency = 'USD';\n          bid.creativeId = decision.adId;\n          bid.ttl = 360;\n          bid.netRevenue = true;\n          bid.referrer = utils.getTopWindowUrl();\n\n          bidResponses.push(bid);\n        }\n      }\n    }\n\n    return bidResponses;\n  },\n\n  getUserSyncs: function(syncOptions) {\n    return [];\n  }\n};\n\nconst sizeMap = [\n  null,\n  '120x90',\n  '120x90',\n  '468x60',\n  '728x90',\n  '300x250',\n  '160x600',\n  '120x600',\n  '300x100',\n  '180x150',\n  '336x280',\n  '240x400',\n  '234x60',\n  '88x31',\n  '120x60',\n  '120x240',\n  '125x125',\n  '220x250',\n  '250x250',\n  '250x90',\n  '0x0',\n  '200x90',\n  '300x50',\n  '320x50',\n  '320x480',\n  '185x185',\n  '620x45',\n  '300x125',\n  '800x250'\n];\n\nsizeMap[77] = '970x90';\nsizeMap[123] = '970x250';\nsizeMap[43] = '300x600';\n\nfunction getSize(sizes) {\n  const result = [];\n  sizes.forEach(function(size) {\n    const index = sizeMap.indexOf(size[0] + 'x' + size[1]);\n    if (index >= 0) {\n      result.push(index);\n    }\n  });\n  return result;\n}\n\nfunction retrieveAd(decision) {\n  return decision.contents && decision.contents[0] && decision.contents[0].body + utils.createTrackPixelHtml(decision.impressionUrl);\n}\n\nregisterBidder(spec);\n\n\n\n// WEBPACK FOOTER //\n// ./modules/serverbidBidAdapter.js"],"sourceRoot":""}